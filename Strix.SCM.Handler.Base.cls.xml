<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.SCM.Handler.Base">
<Description>
Base handler for Studio callbacks, with do-nothing implementations.
Proper handlers subclass this one and implement what they need.</Description>
<IncludeCode>Strix.SCM</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63864,78142.324488</TimeCreated>

<Parameter name="GlobalSettings">
<Description>
This parameter specifies, by property name, which settings for this
handler need to be included in the project configuration file. All
other settings are considered local to the project. Property names
must be separated by commas.</Description>
<Type>STRING</Type>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="GetSettings">
<Description>
Returns a %List of settings applicable to this class. Each setting
is returned as a %List with: name, type, origin</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	Set Result = ""
	
	;Get list of settings to save in config file
	Set GlobalSettings = $ListFromString(##class(Strix.Generator.Utilities).GetParameterValue(%compiledclass, "GlobalSettings"))
	
	Set Key = ""
	For  {
		#dim Prop As %Dictionary.CompiledProperty
		Set Prop = %compiledclass.Properties.GetNext(.Key)
		If Key = "" Quit
		
		If Prop.Private Continue
		If $Extract(Prop.Name) = "%" Continue
		
		If Result '= "" Set Result = Result_","
		
		Set Name = Prop.Name
		Set Type = $$$DenormalizeClassname(Prop.Type)
		Set Origin = Prop.Origin
		
		;Is this a global project setting?
		Set IsGlobal = ''$ListFind(GlobalSettings, Name)
		
		Set Result = Result_"$lb("""_Name_""","""_Type_""","""_Origin_""","_IsGlobal_")"
	}
	
	If Result '= "" {
		Set Result = "Quit $lb("_Result_")"
	} Else {
		Set Result = "Quit """""
	}
	
	Do %code.WriteLine($Char(9)_Result)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetSettingDescription">
<Description>
Returns the (property) description for a specific setting,</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String,Setting:%String,*Status:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set Def = ##class(%Dictionary.PropertyDefinition).%OpenId(ClassName_"||"_Setting, , .Status)
	If 'Status Set Status = $$$BuildErr("Error opening definion for "_ClassName_":"_Setting_":", Status) Quit ""
	Quit Def.Description
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Studio menu actions

]]></Content>
</UDLText>

<Method name="OnMenuItem">
<FormalSpec><![CDATA[MenuName:%String,InternalName:%String,SelectedText:%String,&Enabled:%Boolean,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;All menus defined here are always enabled
	Set Enabled = 1
	
	;Top level menu
	If MenuName '[ "," Quit $$$OK
	
	;Get display name:
	Set SubMenuName = $Piece(MenuName, ",", 2)
	Set DisplayName = $Case(SubMenuName,
	  "LaunchUserInterface": "Open user interface",
	  : MenuName
	)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,SelectedText:%String,&Action:%String,&Target:%String,&Msg:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Defaults
	Set Action = 0, Target = "", Msg = "", Reload = 0
	
	;Studio-generated action (as opposed to menu item)
	If Type = 1 Quit $$$OK
	
	If Name = "Source control,LaunchUserInterface" {
		Set Action = 3
		Try { Set Host = $SYSTEM.TCPDevice.LocalAddr() } Catch (e) { Set Host = ##class(%Function).HostName() }
		Set Port = $Get(^%SYS("WebServer","Port"), "57772")
		Set Namespace = $ZUtil(5)
		Set Target = "http://"_Host_":"_Port_"/csp/"_Namespace_"/Strix.SCM.UI.cls"
		Quit $$$OK
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AfterUserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,Answer:%Integer,Msg:%String="",&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Studio callbacks

]]></Content>
</UDLText>

<Method name="OnBeforeLoad">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterLoad">
<FormalSpec>InternalName:%String,Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeSave">
<FormalSpec>InternalName:%String,Location:%String="",Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<FormalSpec>InternalName:%String,Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterStorage">
<FormalSpec>InternalName:%String,Location:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeCompile">
<FormalSpec><![CDATA[InternalName:%String,&qstruct:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeDelete">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterDelete">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Menus and menu items

]]></Content>
</UDLText>

<Method name="GetMainMenus">
<Description>
Returns a list with the top level menus appropriate for this
handler. These are shared between handlers (unless overridden).
Used by the Studio plugin.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*Status:%Status</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	Set Status = $$$OK
	;Call the menus "Source control", insert in both menu bar
	;and context menu.
	Set Menus = $lb($lb("Source control", 0), $lb("Source control", 1))
	Quit Menus
]]></Implementation>
</Method>

<Method name="GetMenuItems">
<Description>
Returns the menu items for a given menu and document</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>MenuName:%String,InternalName:%String,SelectedText:%String,*Status:%Status</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	Set Status = $$$OK
	
	;Menus that are always valid, regardless of which item is selected
	Set Items = $lb(
	  $lb("LaunchUserInterface", 1, 0, 0)
	)
	
	Quit Items
]]></Implementation>
</Method>
</Class>
</Export>
