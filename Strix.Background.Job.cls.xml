<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.Background.Job">
<Description>
This class supports easily running repeatable, long-running tasks in a
background job. Each task type should be a subclass of this class; each
task run will be an instance. This facilitates storing information on
the state of a running task, errors that have occurred, etc.

Some of the properties of this class that store task- and job-related
info are State, Status, and JobId. These are set by the support code
and should not be set by other code.

Properties that store commonly used task-specific information are Ids
and Results; if and how these are used is up to the task.

Tasks (subclasses) should create one or two methods:

- A classmethod that creates a new instance (object), places the data
  required to perform the task in the instance properties, and calls the
  StartBackgroundJob method on that instance. It should pass the name of
  the method described next. For simple cases, existing classmethod
  RunWithIds may be sufficient.

- A method that will be run in a job, that does the actual work, based
  on the data placed in the instance by the previous method. This method
  will be called by the StartBackgroundJob code. It should return a
  %Status, which will be placed in property Status.

Additional (pairs of) methods may be created if multiple related tasks
are to be placed in the same class.</Description>
<IncludeCode>Strix</IncludeCode>
<Super>%Persistent</Super>
<TimeCreated>63432,38267.054081</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// ===== General state of the task, not to be set directly

]]></Content>
</UDLText>

<Property name="State">
<Description>
The status of the job; initially empty
  RUNNING:   currently running
  DONE:      handled and no errors detected
  ERRORS:    handled and errors detected
  LOCKFAIL:  failed to acquire lock</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",RUNNING,DONE,ERRORS,LOCKFAIL"/>
</Property>

<Property name="Status">
<Description>
The %Status returned from the jobbed method</Description>
<Type>%Status</Type>
</Property>

<Property name="JobId">
<Description>
The id ($Job) of the job executing the background task</Description>
<Type>%String</Type>
</Property>

<Property name="MethodName">
<Description>
The method that to run on this object; useful for tasks with
multiple methods.</Description>
<Type>%String</Type>
</Property>

<Property name="DateTimeStarted">
<Description>
Date/time the actual job was started</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="DateTimeCompleted">
<Description>
Date/time the job was completed</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="UserId">
<Description>
Id of the user that started the job</Description>
<Type>%String</Type>
</Property>

<Property name="LockHeldBy">
<Description>
If locking is implemented and aquiring a lock failed, this property
will be updated with the id of the Job instance that held the lock.</Description>
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// ===== Generic task-specific information; may not be needed/used

]]></Content>
</UDLText>

<Property name="Ids">
<Description>
The ids this background job should operate on</Description>
<Type>%String</Type>
<Collection>list</Collection>
<Parameter name="MAXLEN"/>
<Parameter name="STORAGEDEFAULT" value="array"/>
</Property>

<Property name="Results">
<Description>
The results of this operation; may be only errors, or information as well</Description>
<Type>Strix.Background.ItemInfo</Type>
<Collection>list</Collection>
<Parameter name="STORAGEDEFAULT" value="array"/>
</Property>

<Property name="Progress">
<Description>
Progress of the job, if possible to calculate. An integer between 0 and
100 (i.e., a percentage). Empty if undetermined.</Description>
<Type>%Integer</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="RunWithIds">
<Description>
Generic helper. Creates a new BackgroundJob instance, copies the
Ids into it, and calls the method in a background job. Returns the
id of the instance that was created.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>MethodName:%String,Ids:%ListOfDataTypes,UserId:%String="",*Status:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set Me = ..%New()
	
	For i = 1:1:Ids.Count() Do Me.Ids.Insert(Ids.GetAt(i))
	Set Me.UserId = UserId
	
	Set Status = Me.StartBackgroundJob(MethodName)
	If 'Status Set Status = $$$BuildErr("Error starting background job:", Status)
	
	Quit Me.%Id()
]]></Implementation>
</Method>

<Method name="StartBackgroundJob">
<Description>
Starts a job in the current instance. Assumes that any job-specific data
is already present in the object. If MethodName is not specified, the
corresponding property should be set.</Description>
<FormalSpec>MethodName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If MethodName '= "" Set ..MethodName = MethodName
	
	If ..MethodName = "" Quit $$$BuildErr("Can't start job: MethodName not specified.", 1)
	
	Set Status = ..%Save()
	If 'Status Quit $$$BuildErr("Can't start job: can't save background job object:", Status)
	
	Job $ZObjClassMethod(..%ClassName(1), "RunJob", ..%Id())::20
	If '$Test Quit $$$BuildErr("Error creating background job for batchjob '"_..%Id()_"'.", 1)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckRunning">
<Description>
Given a job object id, checks whether it is still running. Also returns whether
errors were detected, and the content of the Progress property.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>JobObjectId:%String,*Running:%Boolean,*Errors:%Boolean,*Progress:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set (Running, Errors, Progress) = ""
	
	Set Me = ..%OpenId(JobObjectId, , .Status)
	If 'Status Quit $$$BuildErr("Error opening object with id '"_JobObjectId_"':", Status)
	
	;If not completed, check if job is still there
	If Me.DateTimeCompleted '= "", Me.JobId, '$Data(^$Job(Me.JobId)) {
		;Job gone; store error
		Set Me.State = "ERRORS"
		Set Me.Status = $$$BuildErr("Job disappeared.", 1)
		Do Me.%Save()
	}
	
	Set Running = Me.DateTimeCompleted '= ""
	Set Errors =  Me.State = "ERRORS"
	Set Progress = Me.Progress
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Retry">
<Description>
Clears the results and tries the operation again. Useful in case the entire task
failed (e.g. due to connection issues).</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..State = ""
	Set ..Status = ""
	Set ..JobId = ""
	Set ..LockHeldBy = ""
	Set ..DateTimeCompleted = ""
	Do ..Results.Clear()
	
	Set Status = ..%Save()
	If 'Status Quit $$$BuildErr("Error saving updated object", Status)
	
	Set Status = ..StartBackgroundJob(..MethodName)
	If 'Status Quit Status
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ForegroundRetry">
<Description>
Clears the results and tries the operation again in the current job.
Useful in case the entire task failed for unknown reasons.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>JobId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Me = ..%OpenId(JobId, , .Status)
	If 'Status Quit $$$BuildErr("Error opening job '"_JobId_"'", Status)
	
	Set Me.State = ""
	Set Me.Status = ""
	Set Me.JobId = ""
	Set Me.LockHeldBy = ""
	Set Me.DateTimeCompleted = ""
	Do Me.Results.Clear()
	
	Set Status = Me.%Save()
	If 'Status Quit $$$BuildErr("Error saving updated job object", Status)
	
	Kill Me
	
	Do ..RunJob(JobId)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="AddErrorInfo">
<Description>
Shortcut: adds a JobItemInfo object of type error to ..Results</Description>
<FormalSpec>Message:%String,Status:%Status,RelatedId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Info = ##class(Strix.Background.ItemInfo).GetError(Message, Status, RelatedId)
	Do ..Results.Insert(Info)
	Set Status = ..%Save()
	If 'Status Quit $$$BuildErr("Error updating object "_..%Id()_":", Status)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckJobs">
<Description>
For all non-completed jobs, check if the process is still running.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Query = "SELECT ID FROM WebServices_Utilities_Background.Job WHERE DateTimeCompleted IS NULL AND State = 'RUNNING'"
	
	Set rs = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	Set Status = rs.Prepare(Query)
	If 'Status Quit $$$BuildErr("Error in query prepare:", Status)
	
	Set Status = rs.Execute()
	If 'Status Quit $$$BuildErr("Error in query execute:", Status)
	
	While rs.Next() {
		Set Id = rs.Get("ID")
		;CheckRunning will attempt to update object state if job is gone.
		Do ..CheckRunning(Id)
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="Lock">
<Description>
Attempts to aquire a lock for the job. If locking is unsuccessful,
returns the id of the job holding the lock in parameter HeldBy.
The (this) default implementation always returns success; subclasses
can override this method if actual locking is desired.</Description>
<FormalSpec>*HeldBy:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set HeldBy = ""
	Quit 1
]]></Implementation>
</Method>

<Method name="Unlock">
<Description>
This method will be called when the job is done, and can be used
to implement cleanup code. The default implementation does nothing.</Description>
<Implementation><![CDATA[	Quit
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="RunJob">
<Description>
Method runner: runs a method on the specified object instance. Called from
StartBackgroundJob. Not (normally) to be called directly.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>JobObjectId:%String</FormalSpec>
<Implementation><![CDATA[
	Set $ZTrap = "Error"
	
	;Open the requested instance:
	Set Me = ..%OpenId(JobObjectId, , .Status)
	If 'Status Do $$$LogStatusError("Error opening object "_JobObjectId_":", Status) Quit
	
	Set Me.JobId = $Job
	Set Me.DateTimeStarted = $ZDateTime($ZUtil(188), 3, 1, 1)
	Set Status = Me.%Save()
	
	;Attempt lock (if implemented)
	Set HeldBy = -1
	If 'Me.Lock(.HeldBy) {
		Set Me.LockHeldBy = HeldBy
		Set Me.State = "LOCKFAIL"
		Set Me.DateTimeCompleted = $ZDateTime($ZUtil(188), 3, 1, 1)
		Set Status = Me.%Save()
		If 'Status Do $$$LogStatusError("Error saving instance "_Me.%Id()_"; locking failed, HeldBy = '"_HeldBy_"'.", Status)
		Quit
	}
	
	Set Me.State = "RUNNING"
	Set Status = Me.%Save()
	
	;Run the requested method:
	Try {
		Set Status = $ZObjMethod(Me, Me.MethodName)
		
	} Catch e {
		If e.Name = "<COMMAND>" {
			;The method we called didn't return anything.
			Set Status = $$$OK
		} Else {
			;Something else went wrong; get a status describing the problem.
			Set Status = e.AsStatus()
		}
	}
	
	;Update this object
	Set Me.Status = Status
	Set Me.DateTimeCompleted = $ZDateTime($ZUtil(188), 3, 1, 1)
	
	Set ErrorsFound = 0
	For i = 1:1:Me.Results.Count() If Me.Results.GetAt(i).IsError Set ErrorsFound = 1 Quit
	Set Me.State = $Select(Status && 'ErrorsFound: "DONE", 1: "ERRORS")
	
	;Convenience: if progress is used/set by this task, set it to 100 (done).
	If Me.Progress '= "", (Me.State = "DONE") || (Me.Progress = 99) Set Me.Progress = 100
	
	Do Me.Unlock()
	
	Set Status = Me.%Save()
	If 'Status Do $$$LogStatusError("Error saving object "_JobObjectId_":", Status)
	
	Quit
	
Error
	Set $ZTrap = ""
	Do $$$LogTrappedError("MethodName = '"_$Get(MethodName)_"', JobObjectId = '"_$Get(JobObjectId)_"'.")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Strix.Background.JobD</DataLocation>
<DefaultData>JobDefaultData</DefaultData>
<IdLocation>^Strix.Background.JobD</IdLocation>
<IndexLocation>^Strix.Background.JobI</IndexLocation>
<StreamLocation>^Strix.Background.JobS</StreamLocation>
<Data name="Ids">
<Attribute>Ids</Attribute>
<Structure>subnode</Structure>
<Subscript>"Ids"</Subscript>
</Data>
<Data name="JobDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>State</Value>
</Value>
<Value name="3">
<Value>Status</Value>
</Value>
<Value name="4">
<Value>JobId</Value>
</Value>
<Value name="5">
<Value>MethodName</Value>
</Value>
<Value name="6">
<Value>DateTimeStarted</Value>
</Value>
<Value name="7">
<Value>DateTimeCompleted</Value>
</Value>
<Value name="8">
<Value>UserId</Value>
</Value>
<Value name="9">
<Value>LockHeldBy</Value>
</Value>
<Value name="10">
<Value>Progress</Value>
</Value>
</Data>
<Data name="Results">
<Attribute>Results</Attribute>
<Structure>subnode</Structure>
<Subscript>"Results"</Subscript>
</Data>
</Storage>
</Class>
</Export>
