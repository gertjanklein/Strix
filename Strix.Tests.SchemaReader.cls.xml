<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.Tests.SchemaReader">
<Description>
Tests Strix.XML.ToClass.</Description>
<Super>Strix.Testing.TestCase</Super>
<TimeCreated>64594,31293.265299</TimeCreated>

<Parameter name="TestPackage">
<Default>Strix.Tests.SchemaReader</Default>
</Parameter>

<Property name="Reader">
<Type>Strix.XML.SchemaReader</Type>
</Property>

<Property name="CallbackObject">
<Type>Strix.XML.SchemaReaderCallback</Type>
</Property>

<Property name="ScratchData">
<Description>
Temporary data</Description>
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<UDLText name="T">
<Content><![CDATA[
// ===== Tests

]]></Content>
</UDLText>

<Method name="TestProcessStream">
<Description>
Test processing an XSD passes in a stream (ProcessStream method).</Description>
<Implementation><![CDATA[
	#dim Reader As Strix.XML.SchemaReader
	Set Reader = ..GetReader()
	Set XSDStream = ..GetXSD("Schema1")
	
	Set sc = Reader.ProcessStream(XSDStream, ..#TestPackage)
	If '..AssertStatusOk(sc, "Processing schema works.") Quit
	
	If '..AssertClassExists("Base", "Base class generated.") Quit
	Do ..AssertHasProperty("Base", "Element1", "Base has Element1 property.")
	
	If '..AssertClassExists("Element1", "Element1 class generated.") Quit
	Do ..AssertHasProperty("Element1", "String1", "Element1 has String1 property.")
	Do ..AssertHasProperty("Element1", "String2", "Element1 has String2 property.")
	
	Quit
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -----

]]></Content>
</UDLText>

<Method name="TestPostProcessParseTree">
<Description>
Tests that the basic callback method, PostProcessParseTree, is
called during schema processing.</Description>
<Implementation><![CDATA[
	#dim Reader As Strix.XML.SchemaReader
	Set Reader = ..GetReader()
	Set XSDStream = ..GetXSD("Schema1")
	Set sc = ..BuildCallBack(Reader, "PostProcessParseTree", "Callback1")
	
	Set sc = Reader.ProcessStream(XSDStream, ..#TestPackage)
	If '..AssertStatusOk(sc, "Processing schema works.") Quit
	
	Quit
]]></Implementation>
</Method>

<Method name="Callback1">
<FormalSpec>Reader:Strix.XML.SchemaReader,ClassTree:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '..AssertNotEmpty(ClassTree, "We receive a class node as parameter.") Quit $$$OK
	Do ..AssertNotEmpty($Order(@ClassTree@("")), "The node contains data.")
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -----

]]></Content>
</UDLText>

<Method name="TestCallbackStatus">
<Description>
Tests that the basic callback method, PostProcessParseTree, can
abort schema processing by returning an error.</Description>
<Implementation><![CDATA[
	#dim Reader As Strix.XML.SchemaReader
	Set Reader = ..GetReader()
	Set XSDStream = ..GetXSD("Schema1")
	Set sc = ..BuildCallBack(Reader, "PostProcessParseTree", "Callback2")
	
	Set sc = Reader.ProcessStream(XSDStream, ..#TestPackage)
	If '..AssertErrorStatus(sc, "Processing schema fails.") Quit
	Do ..AssertStatusParameter(sc, 1, "Stop here.", "Proper error is returned.") Quit
	
	Quit
]]></Implementation>
</Method>

<Method name="Callback2">
<FormalSpec>Reader:Strix.XML.SchemaReader,ClassTree:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$BuildStatus("Stop here.")
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -----

]]></Content>
</UDLText>

<Method name="TestPostProcessClass">
<Description>
Tests that callback method HandleClass is called for each class.</Description>
<Implementation><![CDATA[
	#dim Reader As Strix.XML.SchemaReader
	Set Reader = ..GetReader()
	Set XSDStream = ..GetXSD("Schema1")
	Set sc = ..BuildCallBack(Reader, "PostProcessClass", "Callback3")
	
	Set sc = Reader.ProcessStream(XSDStream, ..#TestPackage)
	If '..AssertStatusOk(sc, "Processing schema works.") Quit
	
	Do ..Assert($Data(..ScratchData("Base")), "Callback called for Base class.")
	Do ..Assert($Data(..ScratchData("Element1")), "Callback called for Element1 class.")
	
	Quit
]]></Implementation>
</Method>

<Method name="Callback3">
<FormalSpec>Name:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ShortName = $Piece(Name, ".", *)
	If '..Assert("Base,Element1" [ ShortName, "Name '{}' is expected.", ShortName) Quit
	Set ..ScratchData(ShortName) = ""
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -----

]]></Content>
</UDLText>

<Method name="TestHandleProperty">
<Description>
Tests that callback method HandleClass is called for each class.</Description>
<Implementation><![CDATA[
	#dim Reader As Strix.XML.SchemaReader
	Set Reader = ..GetReader()
	Set XSDStream = ..GetXSD("Schema1")
	Set sc = ..BuildCallBack(Reader, "HandleProperty", "Callback4")
	
	Set sc = Reader.ProcessStream(XSDStream, ..#TestPackage)
	If '..AssertStatusOk(sc, "Processing schema works.") Quit
	
	Do ..Assert($Data(..ScratchData("Element1")), "Callback called for Element1 property.")
	Do ..Assert($Data(..ScratchData("String1")), "Callback called for String1 property.")
	Do ..Assert($Data(..ScratchData("String2")), "Callback called for String2 property.")
	
	Quit
]]></Implementation>
</Method>

<Method name="Callback4">
<FormalSpec>Name:%String,Type:%String,IsDataType:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '..Assert("Element1,String1,String2" [ Name, "Name '{}' is expected.", Name) Quit
	If Name = "Element1" {
		Do ..AssertEqual(Type, ..#TestPackage_".Element1", "Property Element1 has proper class.")
		Do ..AssertFalse(IsDataType, "Property {} type is not datatype.", Name)
	} Else {
		Do ..AssertEqual(Type, "%String", "Property {} has proper class.", Name)
		Do ..AssertTrue(IsDataType, "Property {} type is datatype.", Name)
	}
	Set ..ScratchData(Name) = ""
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -----

]]></Content>
</UDLText>

<Method name="TestRenameClass">
<Description>
Tests renaming a class.</Description>
<Implementation><![CDATA[
	#dim Reader As Strix.XML.SchemaReader
	Set Reader = ..GetReader()
	Set XSDStream = ..GetXSD("Schema1")
	Set sc = ..BuildCallBack(Reader, "HandleClass", "Callback5")
	
	
	d $System.OBJ.DeletePackage(..#TestPackage, "-d")
	
	Set sc = Reader.ProcessStream(XSDStream, ..#TestPackage)
	If '..AssertStatusOk(sc, "Processing schema works.") Quit
	
	Do ..AssertClassNotExists("Base", "No Base class present (should be renamed).")
	If ..AssertClassExists("BaseRenamed", "Base class renamed to BaseRenamed.") Quit
	Do ..AssertHasProperty("BaseRenamed", "Element1", "BaseRenamed has Element1 property.")
	
	If '..AssertClassExists("Element1", "Element1 class generated.") Quit
	Do ..AssertHasProperty("Element1", "String1", "Element1 has String1 property.")
	Do ..AssertHasProperty("Element1", "String2", "Element1 has String2 property.")
	
	Quit
]]></Implementation>
</Method>

<Method name="Callback5">
<FormalSpec>Name:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $$$ClassShortName(Name) '= "Base" Quit $$$OK
	Set sc = ..CallbackObject.ChangeClassname("BaseRenamed")
	Do ..AssertStatusOk(sc, "Changing class name does not return an error.")
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -----

]]></Content>
</UDLText>

<Method name="TestRenameProperty">
<Description>
Tests renaming a property.</Description>
<Implementation><![CDATA[
	#dim Reader As Strix.XML.SchemaReader
	Set Reader = ..GetReader()
	Set XSDStream = ..GetXSD("Schema1")
	Set sc = ..BuildCallBack(Reader, "HandleProperty", "Callback6")
	
	Set sc = Reader.ProcessStream(XSDStream, ..#TestPackage)
	If '..AssertStatusOk(sc, "Processing schema works.") Quit
	
	If '..AssertClassExists("Base", "Base class generated.") Quit
	Do ..AssertHasProperty("Base", "Element", "Base has Element property.")
	
	If '..AssertClassExists("Element1", "Element1 class generated.") Quit
	Do ..AssertHasProperty("Element1", "String1", "Element1 has String1 property.")
	Do ..AssertHasProperty("Element1", "SecondString", "Element1 has SecondString property.")
	
	Quit
]]></Implementation>
</Method>

<Method name="Callback6">
<FormalSpec>Name:%String,Type:%String,IsDataType:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If Name = "Element1" {
		Set sc = ..CallbackObject.ChangePropertyName("Element")
		Do ..AssertStatusOk(sc, "Changing property name does not return an error.")
	} ElseIf Name = "String2" {
		Set sc = ..CallbackObject.ChangePropertyName("SecondString")
		Do ..AssertStatusOk(sc, "Changing property name does not return an error.")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -----

]]></Content>
</UDLText>

<Method name="TestChangeRequired">
<Description>
Tests setting a property's required attribute.</Description>
<Implementation><![CDATA[
	#dim Reader As Strix.XML.SchemaReader
	Set Reader = ..GetReader()
	Set XSDStream = ..GetXSD("Schema1")
	Set sc = ..BuildCallBack(Reader, "HandleProperty", "Callback7")
	Set sc = Reader.ProcessStream(XSDStream, ..#TestPackage)
	If '..AssertStatusOk(sc, "Processing schema works.") Quit
	
	Do ..AssertPropertyRequired("Element1", "String1", 1, "String1 property is now required.")
	Do ..AssertPropertyRequired("Element1", "String2", 0, "String2 is no longer required.")
	
	Quit
]]></Implementation>
</Method>

<Method name="Callback7">
<FormalSpec>Name:%String,Type:%String,IsDataType:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If Name = "String1" {
		Set sc = ..CallbackObject.SetPropertyRequired(1)
		Do ..AssertStatusOk(sc, "Changing property required flag does not return an error.")
	} ElseIf Name = "String2" {
		Set sc = ..CallbackObject.SetPropertyRequired(0)
		Do ..AssertStatusOk(sc, "Changing property required flag does not return an error.")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -----

]]></Content>
</UDLText>

<Method name="TestSetClassParameter">
<Description>
Tests setting a class parameter.</Description>
<Implementation><![CDATA[
	#dim Reader As Strix.XML.SchemaReader
	Set Reader = ..GetReader()
	Set XSDStream = ..GetXSD("Schema1")
	Set sc = ..BuildCallBack(Reader, "HandleClass", "Callback8")
	Set sc = Reader.ProcessStream(XSDStream, ..#TestPackage)
	If '..AssertStatusOk(sc, "Processing schema works.") Quit
	
	;Check parameter
	Set Value = $$$GetClassParameter(..#TestPackage_".Base", "XMLIGNORENULL")
	Do ..AssertEqual(Value, "inputonly", "Class parameter set.")
	
	Quit
]]></Implementation>
</Method>

<Method name="Callback8">
<FormalSpec>Name:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $$$ClassShortName(Name) '= "Base" Quit $$$OK
	Set sc = ..CallbackObject.SetClassParameter("XMLIGNORENULL", "inputonly")
	Do ..AssertStatusOk(sc, "Setting class parameter does not return an error.")
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// -----

]]></Content>
</UDLText>

<Method name="TestSetPropertyParameter">
<Description>
Tests setting a property parameter.</Description>
<Implementation><![CDATA[
	#dim Reader As Strix.XML.SchemaReader
	Set Reader = ..GetReader()
	Set XSDStream = ..GetXSD("Schema1")
	Set sc = ..BuildCallBack(Reader, "HandleProperty", "Callback9")
	Set sc = Reader.ProcessStream(XSDStream, ..#TestPackage)
	If '..AssertStatusOk(sc, "Processing schema works.") Quit
	
	;Check parameter
	Set Value = $$$GetPropertyParameter(..#TestPackage_".Element1", "String1", "MAXLEN")
	Do ..AssertEqual(Value, 5, "Property parameter set.")
	
	Quit
]]></Implementation>
</Method>

<Method name="Callback9">
<FormalSpec>Name:%String,Type:%String,IsDataType:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If Name '= "String1" Quit $$$OK
	Set sc = ..CallbackObject.SetPropertyParameter("MAXLEN", 5)
	Do ..AssertStatusOk(sc, "Setting class parameter does not return an error.")
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Helpers

]]></Content>
</UDLText>

<Method name="GetReader">
<ReturnType>Strix.XML.SchemaReader</ReturnType>
<Implementation><![CDATA[
	Set Reader = ##class(Strix.XML.SchemaReader).%New()
	Set Reader.CompileClasses = 0
	Set Reader.MakePersistent = 0
	Set Reader.MakeSerial = 0
	Quit Reader
]]></Implementation>
</Method>

<Method name="GetXSD">
<FormalSpec>Name:%String,*Status:%Status</FormalSpec>
<ReturnType>%Stream.Object</ReturnType>
<Implementation><![CDATA[
	Set XData = ##class(%Dictionary.XDataDefinition).%OpenId(..%ClassName(1)_"||"_Name, , .Status)
	Quit XData.Data
]]></Implementation>
</Method>

<Method name="AssertClassExists">
<FormalSpec>Name:%String,Description:%String,Parameters...:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If Name '[ "." Set Name = ..#TestPackage_"."_Name
	Quit ..Assert(##class(%Dictionary.ClassDefinition).%ExistsId(Name), .Description, .Parameters)
]]></Implementation>
</Method>

<Method name="AssertClassNotExists">
<FormalSpec>Name:%String,Description:%String,Parameters...:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If Name '[ "." Set Name = ..#TestPackage_"."_Name
	Quit ..Assert('##class(%Dictionary.ClassDefinition).%ExistsId(Name), .Description, .Parameters)
]]></Implementation>
</Method>

<Method name="AssertHasProperty">
<FormalSpec>ClassName:%String,PropertyName:%String,Description:%String,Parameters...:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ClassName '[ "." Set ClassName = ..#TestPackage_"."_ClassName
	Quit ..Assert(##class(%Dictionary.PropertyDefinition).%ExistsId(ClassName_"||"_PropertyName), .Description, .Parameters)
]]></Implementation>
</Method>

<Method name="AssertPropertyRequired">
<FormalSpec>ClassName:%String,PropertyName:%String,Value:%Boolean,Description:%String,Parameters...:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ClassName '[ "." Set ClassName = ..#TestPackage_"."_ClassName
	Set Required = ##class(Strix.Testing.Support).GetPropertyAttribute(ClassName, PropertyName, "Required")
	Quit ..AssertEqual(Required, Value, .Description, .Parameters)
]]></Implementation>
</Method>

<Method name="BuildCallBack">
<FormalSpec>Reader:Strix.XML.SchemaReader,Override:%String,With:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ClassName = ..#TestPackage_".CallbackHandler"
	Set sc = ##class(Strix.Testing.Support).CreateClass(ClassName, "Strix.XML.SchemaReaderCallback", .Dic)
	If 'sc Quit $$$BuildStatus("Error creating callback handler:", sc)
	
	Set md = ##class(%Dictionary.MethodDefinition).%OpenId("Strix.XML.SchemaReaderCallback||"_Override,, .sc)
	If 'sc Quit $$$BuildStatus("Error opening original callback method ({}) to override:", sc, Override)
	Set md = md.%ConstructClone()
	Do md.Implementation.Clear()
	
	Set Parms = ""
	For i = 1:1:$Length(md.FormalSpec, ",") {
		Set Name = $Piece($Piece(md.FormalSpec, ",", i), ":")
		If "*&" [ Name Set Name = $Extract(Name, 2, *)
		If i > 1 Set Parms = Parms_","
		Set Parms = Parms_"."_Name
	}
	
	Set Line = " Set sc=%zCurrentTestCase."_With_"("_Parms_")"
	Do md.Implementation.WriteLine(Line)
	Do md.Implementation.WriteLine(" If 'sc Quit sc")
	Do md.Implementation.WriteLine(" Quit ##super("_Parms_")")
	Do Dic.Methods.Insert(md)
	
	Set sc = Dic.%Save()
	If 'sc Quit $$$BuildStatus("Error saving callback {}:", sc, ClassName)
	
	Set sc = $System.OBJ.Compile(ClassName, "-dk")
	If 'sc Quit $$$BuildStatus("Error compiling callback {}:", sc, ClassName)
	
	; Create callback instance
	Set Callback = $ZObjClassMethod(ClassName, "%New")
	
	;Make reader know about callback and v.v.
	Set Callback.Reader = Reader
	Set Reader.Callback = Callback
	
	Set ..Reader = Reader
	Set ..CallbackObject = Callback
	
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Setup/teardown

]]></Content>
</UDLText>

<Method name="Setup">
<Description>
Code to run before any test in this class is executed.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set %zCurrentTestCase = $this
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterTest">
<Description>
Delete generated classes after each test</Description>
<FormalSpec>Name:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = $System.OBJ.DeletePackage(..#TestPackage, "-d")
	If 'sc Quit $$$BuildStatus("Error deleting test package {}:", sc, ..#TestPackage)
	Kill ..ScratchData
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TearDown">
<Description>
Final cleanup, if necessary</Description>
<FormalSpec>FailedTests:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill %zCurrentTestCase
	Set sc = $System.OBJ.DeletePackage(..#TestPackage, "-d")
	If 'sc Quit $$$BuildStatus("Error deleting test package {}:", sc, ..#TestPackage)
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Data

]]></Content>
</UDLText>

<XData name="Schema1">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'>
<xs:element name='Base'>
<xs:complexType>
<xs:choice maxOccurs='1'>
<xs:element name='Element1'>
<xs:complexType>
<xs:sequence>
<xs:element name='String1' type='xs:string' minOccurs='0'/>
<xs:element name='String2' type='xs:string' minOccurs='1'/>
</xs:sequence>
</xs:complexType>
</xs:element>
</xs:choice>
</xs:complexType>
</xs:element>
</xs:schema>
]]></Data>
</XData>
</Class>
</Export>
