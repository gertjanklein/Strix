<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.Lib.Log">
<Description>
Simple logger class</Description>
<IncludeCode>Strix</IncludeCode>
<Super>%Persistent</Super>
<TimeCreated>63646,42215.393023</TimeCreated>

<Property name="When">
<Description>
When the event occurred</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$ZDateTime($ZUtil(188), 3, 1, 3)</InitialExpression>
</Property>

<Property name="Type">
<Description>
The type of event: Debug, Info, Error</Description>
<Type>%String</Type>
</Property>

<Property name="Location">
<Description>
Where the event occurred (e.g. classname:methodname)</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="Status">
<Description>
%Status, if known</Description>
<Type>%Status</Type>
</Property>

<Property name="Message">
<Description>
Information about the event</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="4096"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="LogError">
<Description>
Logs an event of type Error</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Location:%String,Message:%String="",Status:%Status=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Me = ..%New()
	
	Set Me.Type = "Error"
	Set Me.Location = Location
	Set Me.Message = Message
	Set Me.Status = Status
	
	Set sc = Me.%Save()
	If 'sc Do Me.HandleSaveFailure(sc)
	
	;Return a status combining mesage and status
	If $Quit Quit $$$BuildErr(Message, Status)
	
	Quit
]]></Implementation>
</Method>

<Method name="LogTrappedError">
<Description>
Logs a trapped error (e.g., from a $ZTrap trap)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Location:%String,Message:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Me = ..%New()
	
	Set Me.Type = "Error"
	Set Me.Location = Location
	Set Me.Message = Message_" "_$ZError
	
	Set sc = Me.%Save()
	If 'sc Do Me.HandleSaveFailure(sc)
	
	;Return a status containing the message
	If $Quit Quit $$$BuildErr(Message, 1)
	
	Quit
]]></Implementation>
</Method>

<Method name="LogAssertionError">
<Description>
Logs an assert failure</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Location:%String,Condition:%String,Message:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Me = ..%New()
	
	Set Me.Type = "Assert"
	Set Me.Location = Location
	Set Me.Message = Condition
	If Message '= "" Set Me.Message = Me.Message_" ("_Message_")"
	
	Set sc = Me.%Save()
	If 'sc Do Me.HandleSaveFailure(sc)
	
	;Return a status containing the message
	If $Quit Quit $$$BuildErr(Message, 1)
	
	Quit
]]></Implementation>
</Method>

<Method name="LogInfo">
<Description>
Logs an event of type Info</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Location:%String,Message:%String</FormalSpec>
<Implementation><![CDATA[
	Set Me = ..%New()
	
	Set Me.Type = "Info"
	Set Me.Location = Location
	Set Me.Message = Message
	
	Set sc = Me.%Save()
	If 'sc Do Me.HandleSaveFailure(sc)
	
	Quit
]]></Implementation>
</Method>

<Method name="LogDebug">
<Description>
Logs an event of type Debug</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Location:%String,Message:%String</FormalSpec>
<Implementation><![CDATA[
	Set Me = ..%New()
	
	Set Me.Type = "Debug"
	Set Me.Location = Location
	Set Me.Message = Message
	
	Set sc = Me.%Save()
	If 'sc Do Me.HandleSaveFailure(sc)
	
	Quit
]]></Implementation>
</Method>

<Method name="HandleSaveFailure">
<Description>
Fallback method to store info about a failed save in a global
for later examination.</Description>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>Status:%Status</FormalSpec>
<Implementation><![CDATA[
	#define Write(%s) Do %code.WriteLine($Char(9)_%s)
	
	$$$Write("Set Index = $Increment(^LogErrors)")
	
	Set Key = ""
	For  {
		#dim PropDef As %Dictionary.CompiledProperty
		Set PropDef = %compiledclass.Properties.GetNext(.Key)
		If Key = "" Quit
		
		If PropDef.Private Continue
		Set Name = PropDef.Name
		If $Extract(Name) = "%" Continue
		
		$$$Write("Set ^LogErrors(Index, ""d"", """_Name_""") = .."_Name)
	}
	
	$$$Write("Set ^LogErrors(Index, ""s"") = Status")
	
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Strix.Lib.LogD</DataLocation>
<DefaultData>LogDefaultData</DefaultData>
<IdLocation>^Strix.Lib.LogD</IdLocation>
<IndexLocation>^Strix.Lib.LogI</IndexLocation>
<StreamLocation>^Strix.Lib.LogS</StreamLocation>
<Data name="LogDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>When</Value>
</Value>
<Value name="3">
<Value>Type</Value>
</Value>
<Value name="4">
<Value>Location</Value>
</Value>
<Value name="5">
<Value>Status</Value>
</Value>
<Value name="6">
<Value>Message</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
