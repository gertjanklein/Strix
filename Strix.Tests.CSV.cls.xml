<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.Tests.CSV">
<Description>
Tests Strix.Lib.CSV.</Description>
<Super>Strix.Testing.TestCase</Super>
<TimeCreated>64594,31293.265299</TimeCreated>

<Property name="Stream">
<Description>
Stream to use as input to parser</Description>
<Type>%GlobalCharacterStream</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// ===== Tests

]]></Content>
</UDLText>

<Method name="TestBasic">
<Description>
Test basic functionality</Description>
<Implementation><![CDATA[
	Do ..MakeStream("a,b,c", "1,2,3")
	
	#dim p As Strix.Lib.CSV
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream)
	
	If '..Assert(p.Next(.Status), "First row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 3, "Result should have expected number of columns.")
	Do ..AssertEqual(p.Get(1), "a", "Result {} should have expected value.", 1)
	Do ..AssertEqual(p.Get(2), "b", "Result {} should have expected value.", 2)
	Do ..AssertEqual(p.Get(3), "c", "Result {} should have expected value.", 3)
	
	If '..Assert(p.Next(.Status), "Second row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 3, "Result should have expected number of columns.")
	Do ..AssertEqual(p.Get(1), "1", "Result {} should have expected value.", 1)
	Do ..AssertEqual(p.Get(2), "2", "Result {} should have expected value.", 2)
	Do ..AssertEqual(p.Get(3), "3", "Result {} should have expected value.", 3)
	
	If '..Assert('p.Next(.Status), "No third row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should still be ok.")
	
	Quit
]]></Implementation>
</Method>

<Method name="TestSkip">
<Description>
Test header skipping functionality</Description>
<Implementation><![CDATA[
	Do ..MakeStream("a,b,c", "1,2,3", "4,5,6")
	
	; Test skipping first row
	
	#dim p As Strix.Lib.CSV
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream,,1)
	
	If '..Assert(p.Next(.Status), "First row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 3, "Result should have expected number of columns.")
	Do ..AssertEqual(p.Get(1), "1", "Result {} should have expected value.", 1)
	Do ..AssertEqual(p.Get(2), "2", "Result {} should have expected value.", 2)
	Do ..AssertEqual(p.Get(3), "3", "Result {} should have expected value.", 3)
	
	If '..Assert(p.Next(.Status), "Second row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	
	If '..Assert('p.Next(.Status), "No third row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should still be ok.")
	
	;Test skipping all rows
	
	Do ..MakeStream("a,b,c", "1,2,3", "4,5,6")
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream,,3)
	If '..Assert('p.Next(.Status), "No rows should be found when skipping all.") Quit
	Do ..AssertStatusOk(Status, "Returned status should still be ok.")
	
	Quit
]]></Implementation>
</Method>

<Method name="TestSeparator">
<Description>
Test different separator</Description>
<Implementation><![CDATA[
	Do ..MakeStream("a;b;c", "1;2,a;3", "4;5;6")
	
	#dim p As Strix.Lib.CSV
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream, ";")
	
	If '..Assert(p.Next(.Status), "First row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 3, "Result should have expected number of columns.")
	
	If '..Assert(p.Next(.Status), "Second row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 3, "Result should have expected number of columns.")
	Do ..AssertEqual(p.Get(1), "1", "Result {} should have expected value.", 1)
	Do ..AssertEqual(p.Get(2), "2,a", "Result {} should have expected value.", 2)
	Do ..AssertEqual(p.Get(3), "3", "Result {} should have expected value.", 3)
	
	If '..Assert(p.Next(.Status), "Third row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should still ok.")
	
	If '..Assert('p.Next(.Status), "No fourth row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should still be ok.")
	
	Quit
]]></Implementation>
</Method>

<Method name="TestQuoteSimple">
<Description>
Test quoted fields</Description>
<Implementation><![CDATA[
	Do ..MakeStream("1,""x,y,z"",3", "4,5,""6,""", """9"",""8"",""7""", """"""""",b,c")
	
	#dim p As Strix.Lib.CSV
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream)
	
	If '..Assert(p.Next(.Status), "Record {} should be found.", p.RecordNr) Quit
	Do ..AssertStatusOk(Status, "Returned status for record {} should be ok.", p.RecordNr)
	Do ..AssertEqual(p.Data, 3, "Record {} should have expected number of columns.", p.RecordNr)
	Do ..AssertEqual(p.Get(1), "1", "Record {}, field 1 should have expected value.", p.RecordNr)
	Do ..AssertEqual(p.Get(2), "x,y,z", "Record {}, field 2 should have expected value.", p.RecordNr)
	Do ..AssertEqual(p.Get(3), "3", "Record {}, field 3 should have expected value.", p.RecordNr)
	
	If '..Assert(p.Next(.Status), "Record {} should be found.", p.RecordNr) Quit
	Do ..AssertStatusOk(Status, "Returned status for record {} should be ok.", p.RecordNr)
	Do ..AssertEqual(p.Data, 3, "Record {} should have expected number of columns.", p.RecordNr)
	Do ..AssertEqual(p.Get(1), "4", "Record {}, field 1 should have expected value.", p.RecordNr)
	Do ..AssertEqual(p.Get(2), "5", "Record {}, field 2 should have expected value.", p.RecordNr)
	Do ..AssertEqual(p.Get(3), "6,", "Record {}, field 3 should have expected value.", p.RecordNr)
	
	If '..Assert(p.Next(.Status), "Record {} should be found.", p.RecordNr) Quit
	Do ..AssertStatusOk(Status, "Returned status for record {} should be ok.", p.RecordNr)
	Do ..AssertEqual(p.Data, 3, "Record {} should have expected number of columns.", p.RecordNr)
	Do ..AssertEqual(p.Get(1), "9", "Record {}, field 1 should have expected value.", p.RecordNr)
	Do ..AssertEqual(p.Get(2), "8", "Record {}, field 2 should have expected value.", p.RecordNr)
	Do ..AssertEqual(p.Get(3), "7", "Record {}, field 3 should have expected value.", p.RecordNr)
	
	If '..Assert(p.Next(.Status), "Record {} should be found.", p.RecordNr) Quit
	Do ..AssertStatusOk(Status, "Returned status for record {} should be ok.", p.RecordNr)
	Do ..AssertEqual(p.Data, 3, "Record {} should have expected number of columns.", p.RecordNr)
	Do ..AssertEqual(p.Get(1), """", "Record {}, field 1 should have expected value.", p.RecordNr)
	Do ..AssertEqual(p.Get(2), "b", "Record {}, field 2 should have expected value.", p.RecordNr)
	Do ..AssertEqual(p.Get(3), "c", "Record {}, field 3 should have expected value.", p.RecordNr)
	
	If '..Assert('p.Next(.Status), "No more rows should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should still be ok.")
	
	Quit
]]></Implementation>
</Method>

<Method name="TestMultiline">
<Description>
Test multiline quoted fields</Description>
<Implementation><![CDATA[
	#dim p As Strix.Lib.CSV
	
	; Field 2 split over 3 lines
	
	Do ..MakeStream("1,""This is"_$$$EOL_"a multiline"_$$$EOL_"field."",3")
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream)
	If '..Assert(p.Next(.Status), "First row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 3, "Result should have expected number of columns.")
	Do ..AssertEqual(p.Get(1), "1", "Result 1 should have expected value.")
	Do ..AssertEqual(p.Get(2), "This is"_$$$EOL_"a multiline"_$$$EOL_"field.", "Result 2 should have expected value.")
	Do ..AssertEqual(p.Get(3), "3", "Result 3 should have expected value.")
	
	; Last field ends in newlines
	
	Do ..MakeStream("""Newlines: "_$$$EOL_$$$EOL_"""")
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream)
	If '..Assert(p.Next(.Status), "First row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 1, "Result should have expected number of columns.")
	Do ..AssertEqual(p.Get(1), "Newlines: "_$$$EOL_$$$EOL, "Result should have expected value.")
	
	Quit
]]></Implementation>
</Method>

<Method name="TestErrors">
<Description>
Test unparseable data</Description>
<Implementation><![CDATA[
	#dim p As Strix.Lib.CSV
	
	; Lone quote in quoted field
	
	Do ..MakeStream("1,""before""after"",3", "4,5,6")
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream)
	Do ..AssertFalse(p.Next(.Status), "First row should not be found.")
	Do ..AssertErrorStatus(Status, "Returned status should be an error.")
	
	; End of data searching for close quote
	
	Do ..MakeStream("1,""")
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream)
	Do ..AssertFalse(p.Next(.Status), "First row should not be found.")
	Do ..AssertErrorStatus(Status, "Returned status should be an error.")
	
	Do ..MakeStream("1,"""_$$$EOL_$$$EOL)
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream)
	Do ..AssertFalse(p.Next(.Status), "First row should not be found.")
	Do ..AssertErrorStatus(Status, "Returned status should be an error.")
	
	
	Quit
]]></Implementation>
</Method>

<Method name="TestByName">
<Description>
Test retrieving column by name</Description>
<Implementation><![CDATA[
	#dim p As Strix.Lib.CSV
	
	; Take column names from first row if skipcount is precisely 1
	
	Do ..MakeStream("a,b,c", "1,2,3", "4,5,6")
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream, , 1)
	If '..Assert(p.Next(.Status), "First row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 3, "Result should have expected number of columns.")
	Do ..AssertEqual(p.GetByName("a"), "1", "Result a should have expected value.")
	Do ..AssertEqual(p.GetByName("b"), "2", "Result b should have expected value.")
	Do ..AssertEqual(p.GetByName("c"), "3", "Result c should have expected value.")
	
	; ...unless this is explicitly turned off
	
	Do ..MakeStream("a,b,c", "1,2,3", "4,5,6")
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream, , 1, "")
	If '..Assert(p.Next(.Status), "First row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 3, "Result should have expected number of columns.")
	Do ..AssertEqual(p.GetByName("a"), "", "Column 1 should not be found by name.")
	Do ..AssertEqual(p.GetByName("b"), "", "Column 2 should not be found by name.")
	Do ..AssertEqual(p.GetByName("c"), "", "Column 3 should not be found by name.")
	
	; Columns names set manually
	
	Do ..MakeStream("a,b,c", "1,2,3", "4,5,6")
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream, , 1, "x,y,z")
	If '..Assert(p.Next(.Status), "First row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 3, "Result should have expected number of columns.")
	Do ..AssertEqual(p.GetByName("x"), "1", "Column 1 should be accessible by name x.")
	Do ..AssertEqual(p.GetByName("y"), "2", "Column 2 should be accessible by name y.")
	Do ..AssertEqual(p.GetByName("z"), "3", "Column 3 should be accessible by name z.")
	
	; Not all names need to be present
	
	Do ..MakeStream("a,b,c", "1,2,3", "4,5,6")
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream, , 1, "x,,z")
	If '..Assert(p.Next(.Status), "First row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertEqual(p.Data, 3, "Result should have expected number of columns.")
	Do ..AssertEqual(p.GetByName("x"), "1", "Column 1 should be accessible by name x.")
	Do ..AssertEqual(p.Get(2), "2", "Column 2 should be accessible by column number.")
	Do ..AssertEqual(p.GetByName("z"), "3", "Column 3 should be accessible by name z.")
	
	
	Quit
]]></Implementation>
</Method>

<Method name="TestGetAsList">
<Description>
Test GetAsList</Description>
<Implementation><![CDATA[
	#dim p As Strix.Lib.CSV
	
	Do ..MakeStream("a,b,c", "1,2,3", "4,5,6")
	Set p = ##class(Strix.Lib.CSV).GetParser(..Stream)
	
	If '..Assert(p.Next(.Status), "First row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertListEqual(p.GetAsList(), $lfs("a,b,c"), "GetAsList should return the proper data.")
	
	If '..Assert(p.Next(.Status), "Second row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertListEqual(p.GetAsList(), $lfs("1,2,3"), "GetAsList should return the proper data.")
	
	If '..Assert(p.Next(.Status), "Third row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should be ok.")
	Do ..AssertListEqual(p.GetAsList(), $lfs("4,5,6"), "GetAsList should return the proper data.")
	
	If '..Assert('p.Next(.Status), "No fourth row should be found.") Quit
	Do ..AssertStatusOk(Status, "Returned status should still be ok.")
	
	Quit
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Helpers

]]></Content>
</UDLText>

<Method name="MakeStream">
<FormalSpec>Lines...:%String</FormalSpec>
<Implementation><![CDATA[
	Do ..Stream.Clear()
	For i = 1:1:$Get(Lines) {
		Do ..Stream.WriteLine($Get(Lines(i)))
	}
	Do ..Stream.Rewind()
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Cleanup code.

]]></Content>
</UDLText>

<Method name="TearDown">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
