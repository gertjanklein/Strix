<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.SCM.Handler.Subversion">
<IncludeCode>Strix</IncludeCode>
<Super>Strix.SCM.Handler.File</Super>
<TimeCreated>64301,43556.823379</TimeCreated>

<Property name="SvnPath">
<Description>
Full path and filename of the SVN executable.</Description>
<Type>%String</Type>
</Property>

<Property name="ReleasePath">
<Description>
Full path to release base directory; releases are created below it.</Description>
<Type>%String</Type>
</Property>

<Property name="PostProcessor">
<Description>
ClassName:MethodName of a classmethod to call to post-process
the release. Arguments passed in are the Project object, release
number, and direcory of the release. Return value must be a %Status.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="80"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="UserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,SelectedText:%String,&Action:%String,&Target:%String,&Msg:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Assume we won't handle this action
	Set Action = 0, Target = "", Msg = "", Reload = 0
	
	;Studio-generated action (as opposed to menu item)
	If Type = 1 Quit $$$OK
	
	;===== Get project
	
	If InternalName = "" Quit $$$OK
	
	#dim Project As Strix.SCM.Project
	If '##class(Strix.SCM.Project).CheckItem(.InternalName, .Project, .AsItem, .AsStorage, .Msg) {
		If Msg '= "" Set Action = 6 ; MesssageBox
		Quit $$$OK
	}
	
	
	;== Show revisions
	
	If Name = "Source control,ShowRevisions", AsItem {
		Set Filename = Project.GetExportFilename(InternalName, , , .Status)
		If 'Status Quit Status
		
		Set Output = ..GetCommandOutput("log """_Filename_"""", 1, .ErrorMsg)
		If ErrorMsg '= "" Write ErrorMsg,! Quit $$$OK
		
		Write !,"== Revision history for "_InternalName_":"
		For i = 1:1:Output.Count() {
			Set Line = Output.GetAt(i)
			
			If Line ?1."-" Continue
			If Line = "" Continue
			
			If Line ? 1"r"1.N1.E {
				;Keep empty line between revisions
				Write !
			} Else {
				;Indent comment line(s)
				Write "  "
			}
			
			Write Line,!
		}
		
		Quit $$$OK
	}
	
	
	;== Delete item
	
	If Name = "Source control,Delete", AsItem {
		Set Action = 1 ;Yes/no/cancel
		Set Target = "Are you sure you want to delete '"_InternalName_"'?"
		Quit $$$OK
	}
	
	
	;== Status
	
	If Name = "Source control,Status" {
		Write !,"== Working copy status:"
		Set Output = ..GetCommandOutput("status -u """_Project.GetProjectPath()_"""", , .ErrorMsg)
		If ErrorMsg '= "" Write ErrorMsg,! Quit $$$OK
		Write !,Output,!
		Quit $$$OK
	}
	
	
	;== Checkin
	
	If Name = "Source control,Checkin" {
		Set Target = ..GetGUICommand("/command:commit /path:"_Project.GetProjectPath(), .ErrorMsg)
		If ErrorMsg '= "" Write ErrorMsg,! Quit $$$OK
		Set Action = 3 ; Run executable
		Quit $$$OK
	}
	
	
	;== Make release
	
	If Name = "Source control,MakeRelease" {
		If ..ReleasePath '= "" {
			Set Target = "Please specify the revision to create a release for:"
			Set Msg = "HEAD"
			Set Action = 7 ; Ask user for input
		} Else {
			Set Action = 6 ;Alert
			Set Target = "No release path configured."
		}
		Quit $$$OK
	}
	
	
	;===== Fallback to File handler
	
	Quit ##super(Type, Name, InternalName, SelectedText, .Action, .Target, .Msg, .Reload)
]]></Implementation>
</Method>

<Method name="AfterUserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,Answer:%Integer,Msg:%String="",&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Reload = 0
	
	;Studio-generated action (as opposed to menu item)
	If Type = 1 Quit $$$OK
	
	;User says no
	If Answer = 0 Quit $$$OK  ; No
	If Answer = 2 Quit $$$OK  ; Cancel
	
	;===== Get project
	
	#dim Project As Strix.SCM.Project
	If InternalName = "" Quit $$$OK
	If '##class(Strix.SCM.Project).CheckItem(.InternalName, .Project, .AsItem, .AsStorage, .ErrorMsg) {
		Write !,ErrorMsg,!
		Quit $$$OK
	}
	
	
	;===== Delete item
	
	If Name = "Source control,Delete", AsItem {
		Set Filename = Project.GetExportFilename(InternalName, , , .Status)
		If 'Status Quit Status
		
		If ##class(%File).Exists(Filename) {
			;Delete from source control
			Set Output = ..GetCommandOutput("delete --force """_Filename_"""", , .ErrorMsg)
			If ErrorMsg '= "" Write !,ErrorMsg,! Quit $$$OK
			If Output [ "svn: E" Write !,Output,! Quit $$$OK
		}
		
		Set Status = $System.OBJ.Delete(InternalName, "d")
		If 'Status Quit Status
		
		Quit $$$OK
	}
	
	
	;== Make release
	
	If Name = "Source control,MakeRelease" {
		Set Status = ..MakeRelease(Project, Msg, .ErrorMsg)
		If ErrorMsg '= "" Write !,ErrorMsg,!
		Quit Status
	}
	
	
	;===== Fallback to File handler
	
	Quit ##super(Type, Name, InternalName, Answer, .Msg, .Reload)
]]></Implementation>
</Method>

<Method name="OnMenuItem">
<Description>
Called when a menu item is to be displayed; determines what to display,
and whether the item should be enabled or not.</Description>
<FormalSpec><![CDATA[MenuName:%String,InternalName:%String,SelectedText:%String,&Enabled:%Boolean,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ItemName = $Piece(MenuName, ",", 2)
	Set Name = $Case(ItemName,
	  "ShowRevisions": "Revisions for "_InternalName_"",
	  "Delete": "Delete "_InternalName_"",
	  "Status": "Working copy status",
	  "Checkin": "Open checkin dialog",
	  "MakeRelease": "Make release",
	  : ""
	)
	
	;If we didn't handle this item, fall back to super
	If Name = "" Quit ##super(MenuName, InternalName, SelectedText, .Enabled, .DisplayName)
	Set DisplayName = Name
	
	#dim Project As Strix.SCM.Project
	If ##class(Strix.SCM.Project).CheckItem(.InternalName, .Project, .AsItem, .AsStorage) {
		;Enabled if known as item, otherwise not
		Set Enabled = $Select(AsItem: 1, 1: 0)
		
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="GetMenuItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>MenuName:%String,InternalName:%String,SelectedText:%String,*Status:%Status</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	;Get items for file handler
	Set Items = ##super(MenuName, InternalName, SelectedText, .Status)
	If 'Status Quit Items
	
	;Append subversion-specific items
	Set Items = Items_$lb(
	  $lb("", 1, 0, 1),
	  $lb("Status", 1, 1, 0),
	  $lb("Checkin", 1, 1, 0),
	  $lb("", 1, 0, 1),
	  $lb("ShowRevisions", 1, 1, 0),
	  $lb("Delete", 1, 1, 0),
	  $lb("", 1, 0, 1),
	  $lb("MakeRelease", 1, 1, 0),
	)
	
	Quit Items
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="MakeRelease">
<FormalSpec>Project:Strix.SCM.Project,Revision:%String,*ErrorMsg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ErrorMsg = ""
	
	;Get project directory
	Set Dir = Project.GetProjectPath(.Status)
	If 'Status Quit $$$BuildErr("Error determining project path", Status)
	
	;Get corresponding repository URL
	Set Url = ..GetCommandOutput("info --show-item url """_Dir_"""", , .ErrorMsg)
	If ErrorMsg '= "" Quit $$$OK
	If Url ? 1"svn: E"1.E Set ErrorMsg = "Error determining repository Url: "_Url Quit $$$OK
	
	If Revision = "HEAD" {
		Set Revision = ..GetCurrentRevision(Dir, .ErrorMsg)
		If ErrorMsg '= "" Quit $$$OK
	}
	
	;Determine directory for release
	Set ReleasePath = ##class(%File).SubDirectoryName(..ReleasePath, "R"_Revision)
	
	;Export from SCM
	Write !,"== Exporting revision "_Revision_" to "_ReleasePath,!
	Set Output = ..GetCommandOutput("export -r "_Revision_" --force "_Url_" """_ReleasePath_"""", , .ErrorMsg)
	If ErrorMsg '= "" Quit $$$OK
	
	If Output ? 1"svn: E"1.E Set ErrorMsg = "Error exporting revision: "_Output Quit $$$OK
	
	Write "== Release "_Revision_" exported successfully.",!
	
	If ..PostProcessor '= "" {
		If '##class(%Dictionary.CompiledMethod).%ExistsId(..PostProcessor_"||Run") {
			Set ErrorMsg = "Postprocessor "_..PostProcessor_":Run() doesn't exist."
			Quit $$$OK
		}
		
		Write "== Running postprocessor "_..PostProcessor,!
		Try {
			Set Status = $ZObjClassMethod(..PostProcessor, "Run", Project, Revision, ReleasePath)
		} Catch e {
			Set Status = e.AsStatus()
		}
		If 'Status Set ErrorMsg = "Error running postprocessor: "_$System.Status.GetErrorText(Status) Quit $$$OK
		Write "== Successfully ran postprocessor.",!
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCommandOutput">
<Description>
Returns the output of an svn command (to be passed in without
specifying the executable path). If Split is true, returns it
as a list of lines, already stripped. If an error occurs, the
output parameter ErrorMsg will contain information. A timeout
may occur on the Read if Cache does not have permission to
read the repository.</Description>
<FormalSpec>Command:%String,Split:%Boolean=0,*ErrorMsg:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	; Prefix command with normalized path to svn executable
	Set Executable = ##class(%File).NormalizeFilenameWithSpaces(..SvnPath)
	Set Command = Executable_" "_Command
	
	;Get output
	Set Result = ##class(Strix.Lib.IO).GetCommandOutput(Command, , .ErrorMsg)
	If ErrorMsg '= "" Quit ""
	
	If Split Set Result = ##class(Strix.Lib.String).SplitLines(Result)
	
	Quit Result
]]></Implementation>
</Method>

<Method name="GetCurrentRevision">
<FormalSpec>ItemPath:%String,*ErrorMsg:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;Split executable in file and directory
	Set Dir = ##class(%File).GetDirectory(..SvnPath)
	Set File = ##class(%File).GetFilename(..SvnPath)
	
	;Change executable; we need svnversion
	Set File = $Replace(File, "svn", "svnversion")
	Set Executable = ##class(%File).SubDirectoryName(Dir, File)
	
	;Normalize spaces
	Set Executable = ##class(%File).NormalizeFilenameWithSpaces(Executable)
	
	;Build full command
	Set Command = Executable_" """_ItemPath_""""
	
	;Get output
	Set Result = ##class(Strix.Lib.IO).GetCommandOutput(Command, , .ErrorMsg)
	If ErrorMsg '= "" Quit ""
	
	If $Extract(Result) '? 1N Set ErrorMsg = "Error determining current revision: "_Result Quit ""
	
	;If multiple revisions for this item, we want the latest
	If Result [ ":" Set Result = $Piece(Result, ":", 2)
	
	;Strip modifier flags
	Set Result = +Result
	
	Quit Result
]]></Implementation>
</Method>

<Method name="GetGUICommand">
<FormalSpec>Command:%String,*ErrorMsg:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ErrorMsg = ""
	
	Set Dir = ##class(%File).GetDirectory(..SvnPath)
	Set Executable = ##class(%File).SubDirectoryName(Dir, "TortoiseProc.exe")
	
	If '##class(%File).Exists(Executable) {
		Set ErrorMsg = "Option not available: TortoiseSVN executable '"_Executable_"' not found."
		Quit ""
	}
	
	Set Executable = ##class(%File).NormalizeFilenameWithSpaces(Executable)
	Set Command = Executable_" "_Command
	
	Quit Command
]]></Implementation>
</Method>
</Class>
</Export>
