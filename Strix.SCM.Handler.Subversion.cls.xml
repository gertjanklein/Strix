<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.SCM.Handler.Subversion">
<Super>Strix.SCM.Handler.File</Super>
<TimeCreated>64301,43556.823379</TimeCreated>

<Property name="SvnPath">
<Description>
Full path and filename of the SVN executable.</Description>
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="UserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,SelectedText:%String,&Action:%String,&Target:%String,&Msg:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Assume we won't handle this action
	Set Action = 0, Target = "", Msg = "", Reload = 0
	
	;Studio-generated action (as opposed to menu item)
	If Type = 1 Quit $$$OK
	
	;===== Get project
	
	If InternalName = "" Quit $$$OK
	
	#dim Project As Strix.SCM.Project
	If '##class(Strix.SCM.Project).CheckItem(.InternalName, .Project, .AsItem, .AsStorage, .Msg) {
		If Msg '= "" Set Action = 6 ; MesssageBox
		Quit $$$OK
	}
	
	
	;== Show revisions
	
	If Name = "Source control,ShowRevisions", AsItem {
		Set Filename = Project.GetExportFilename(InternalName, , , .Status)
		If 'Status Quit Status
		
		Set Output = ..GetCommandOutput("log """_Filename_"""", , .ErrorMsg)
		If ErrorMsg '= "" Write ErrorMsg,! Quit $$$OK
		
		Write !,"== Revision history for "_InternalName_":"
		For i = 1:1:Output.Count() {
			Set Line = Output.GetAt(i)
			
			If Line ?1."-" Continue
			If Line = "" Continue
			
			If Line ? 1"r"1.N1.E {
				;Keep empty line between revisions
				Write !
			} Else {
				;Indent comment line(s)
				Write "  "
			}
			
			Write Line,!
		}
		
		Quit $$$OK
	}
	
	
	;== Delete item
	
	If Name = "Source control,Delete", AsItem {
		Set Action = 1 ;Yes/no/cancel
		Set Target = "Are you sure you want to delete '"_InternalName_"'?"
		Quit $$$OK
	}
	
	
	;== Status
	
	If Name = "Source control,Status" {
		Write !,"== Working copy status:"
		Set Output = ..GetCommandOutput("status -u """_Project.ProjectPath_"""", 0, .ErrorMsg)
		If ErrorMsg '= "" Write ErrorMsg,! Quit $$$OK
		Write !,Output,!
		Quit $$$OK
	}
	
	
	;===== Fallback to File handler
	
	Quit ##super(Type, Name, InternalName, SelectedText, .Action, .Target, .Msg, .Reload)
]]></Implementation>
</Method>

<Method name="AfterUserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,Answer:%Integer,Msg:%String="",&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Assume we won't handle this action
	Set Action = 0, Target = "", Msg = "", Reload = 0
	
	;Studio-generated action (as opposed to menu item)
	If Type = 1 Quit $$$OK
	
	;User says no
	If Answer = 0 Quit $$$OK  ; No
	If Answer = 2 Quit $$$OK  ; Cancel
	
	;===== Get project
	
	#dim Project As Strix.SCM.Project
	If InternalName = "" Quit $$$OK
	If '##class(Strix.SCM.Project).CheckItem(.InternalName, .Project, .AsItem, .AsStorage, .Msg) Quit $$$OK
	
	
	;===== Delete item
	
	If Name = "Source control,Delete", AsItem {
		Set Filename = Project.GetExportFilename(InternalName, , , .Status)
		If 'Status Quit Status
		
		If ##class(%File).Exists(Filename) {
			;Delete from source control
			Set Output = ..GetCommandOutput("delete --force """_Filename_"""", 0, .ErrorMsg)
			If ErrorMsg '= "" Write !,ErrorMsg,! Quit $$$OK
			If Output [ "svn: E" Write !,Output,! Quit $$$OK
		}
		
		Set Status = $System.OBJ.Delete(InternalName, "d")
		If 'Status Quit Status
		
		Quit $$$OK
	}
	
	
	;===== Fallback to File handler
	
	Quit ##super(Type, Name, InternalName, Answer, .Msg, .Reload)
]]></Implementation>
</Method>

<Method name="OnMenuItem">
<Description>
Called when a menu item is to be displayed; determines what to display,
and whether the item should be enabled or not.</Description>
<FormalSpec><![CDATA[MenuName:%String,InternalName:%String,SelectedText:%String,&Enabled:%Boolean,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ItemName = $Piece(MenuName, ",", 2)
	Set Name = $Case(ItemName,
	  "ShowRevisions": "Show revisions for "_InternalName_"",
	  "Delete": "Delete "_InternalName_"",
	  "Status": "Working copy status",
	  : ""
	)
	
	;If we didn't handle this item, fall back to super
	If Name = "" Quit ##super(MenuName, InternalName, SelectedText, .Enabled, .DisplayName)
	Set DisplayName = Name
	
	#dim Project As Strix.SCM.Project
	If ##class(Strix.SCM.Project).CheckItem(.InternalName, .Project, .AsItem, .AsStorage) {
		;Enabled if known as item, otherwise not
		Set Enabled = $Select(AsItem: 1, 1: 0)
		
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="GetMenuItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>MenuName:%String,InternalName:%String,SelectedText:%String,*Status:%Status</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	;Get items for file handler
	Set Items = ##super(MenuName, InternalName, SelectedText, .Status)
	If 'Status Quit Items
	
	;Append subversion-specific items
	Set Items = Items_$lb(
	  $lb("", 1, 0, 1),
	  $lb("ShowRevisions", 1, 1, 0),
	  $lb("Delete", 1, 1, 0),
	  $lb("Status", 1, 1, 0),
	)
	
	Quit Items
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="GetCommandOutput">
<Description>
Returns the output of an svn command (to be passed in without
specifying the executable path). If Split is true, returns it
as a list of lines, already stripped. If an error occurs, the
output parameter ErrorMsg will contain information. A timeout
may occur on the Read if Cache does not have permission to
read the repository.</Description>
<FormalSpec>Command:%String,Split:%Boolean=1,*ErrorMsg</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	; Prefix command with normalized path to svn executable
	Set Executable = ##class(%File).NormalizeFilenameWithSpaces(..SvnPath)
	Set Command = Executable_" "_Command
	
	;Get output
	Set Result = ##class(Strix.Lib.IO).GetCommandOutput(Command, Split, .ErrorMsg)
	
	Quit Result
]]></Implementation>
</Method>
</Class>
</Export>
