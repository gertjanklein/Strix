<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.JSON.Iterator">
<Description>
Iterator over dynamic objects with additional helper methods.</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>64391,38497.266051</TimeCreated>

<Property name="Object">
<Type>%DynamicAbstractObject</Type>
</Property>

<Property name="Iterator">
<Type>%Iterator.Array</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="GetIterator">
<ClassMethod>1</ClassMethod>
<FormalSpec>Object:%DynamicAbstractObject</FormalSpec>
<ReturnType>Strix.JSON.Iterator</ReturnType>
<Implementation><![CDATA[
	Set Me = ..%New()
	Set Me.Object = Object
	Set Me.Iterator = Object.%GetIterator()
	Quit Me
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="GetNext">
<Description>
GetNext mirrors the iterators %GetNext method, but additionally
outputs the type of the value</Description>
<FormalSpec>*Key,*Value,*Type:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set HasValue = ..Iterator.%GetNext(.Key, .Value)
	If 'HasValue Set Type = "" Quit 0
	Set Type = ..Object.%GetTypeOf(Key)
	Quit 1
]]></Implementation>
</Method>

<Method name="GetPrevious">
<FormalSpec>*Key,*Value,*Type:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ..Iterator.pointer < 1 Set (Key, Value) = "" Quit 0
	
	;Find a position before the previous item
	Set SavedPointer = ..Iterator.pointer
	Set Found = 0, Pointer = ..Iterator.pointer - 1
	For  {
		Set Pointer = Pointer - 1
		Set ..Iterator.pointer = Pointer
		Do ..Iterator.%GetNext(.Key, .Value)
		If ..Iterator.pointer '= SavedPointer {
			;We've found the previous element
			Set Type = ..Object.%GetTypeOf(Key)
			Set Found = 1
			Quit
		}
		;If no elements left to try, quit
		If ..Iterator.pointer < 0 Quit
	}
	
	If 'Found Set (Key, Value) = "", Type = "unassigned" Quit 0
	
	Quit 1
]]></Implementation>
</Method>

<Method name="Reset">
<Description>
Resets the iterator to its initial state</Description>
<Implementation><![CDATA[	Set ..Iterator.pointer = -1
]]></Implementation>
</Method>

<Method name="IsFirst">
<CodeMode>expression</CodeMode>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[..PeekPrevious()
]]></Implementation>
</Method>

<Method name="IsLast">
<CodeMode>expression</CodeMode>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[..PeekNext()
]]></Implementation>
</Method>

<Method name="PeekNext">
<Description>
Gets the next key/value/type for the given (array or object) iterator,
without changing the current state.
Returns false if no next value is present.</Description>
<FormalSpec>*Key,*Value,*Type</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set SavedPointer = ..Iterator.pointer
	Set HasValue = ..Iterator.%GetNext(.Key, .Value)
	Set ..Iterator.pointer = SavedPointer
	Set Type = $Select(HasValue: ..Object.%GetTypeOf(Key), 1: "unassigned")
	Quit HasValue
]]></Implementation>
</Method>

<Method name="PeekPrevious">
<Description>
Gets the previous key/value/type for the given (array or object) iterator,
without changing the current state.
Returns false if no next value is present.</Description>
<FormalSpec>*Key,*Value,*Type</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	If ..Iterator.pointer < 1 Set (Key, Value) = "", Type = "unassigned" Quit 0
	
	;Find a position before the previous item
	Set SavedPointer = ..Iterator.pointer
	Set Found = 0, Pointer = ..Iterator.pointer - 1
	For  {
		Set Pointer = Pointer - 1
		Set ..Iterator.pointer = Pointer
		Do ..Iterator.%GetNext(.Key, .Value)
		If ..Iterator.pointer '= SavedPointer {
			;We've found the previous element
			Set Type = ..Object.%GetTypeOf(Key)
			Set Found = 1
			Quit
		}
		;If no elements left to try, quit
		If ..Iterator.pointer < 0 Quit
	}
	Set ..Iterator.pointer = SavedPointer
	
	If 'Found Set (Key, Value) = "", Type = "unassigned" Quit 0
	
	Quit 1
]]></Implementation>
</Method>
</Class>
</Export>
