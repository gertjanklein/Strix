<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.JSON.Property">
<IncludeCode>Strix</IncludeCode>
<IncludeGenerator>Strix</IncludeGenerator>
<Super>%DataType</Super>
<TimeCreated>64714,55414.338999</TimeCreated>

<Parameter name="Conversion">
<Description>
Specifies what conversion to perform on values, if any.
. JSON: convert JSON strings to %DynamicObject (on set and open)
. Str: Convert %DynamicObject to their equivalent string (on set)
. (empty): Do no conversion.
Properties with Conversion set to JSON will reconvert stored
values to a %DynamicObject when opening an existing object.
%DynamicArray is treated the same as %DynamicObject.</Description>
<Type>STRING</Type>
<Constraint>,JSON,Str</Constraint>
<Flags>ENUMEDIT</Flags>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="IsValid">
<Description>
Value must either be a %Dynamic[Object|Array], or a valid JSON string.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If %val = "" Quit $$$OK
	If $IsObject(%val) {
		If %val.%IsA("%DynamicAbstractObject") Quit $$$OK
		Quit $$$BuildStatus("Unrecognised object type {}.",, %val.%ClassName(1))
	}
	Try {
		Do ##class(%DynamicAbstractObject).%FromJSON(%val)
	} Catch {
		Return $$$BuildStatus("String not valid JSON.")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Set">
<Description>
Setter implements type conversion, if needed.</Description>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>%val</FormalSpec>
<NoContext>1</NoContext>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Name = %property
	
	; If name is empty we're compiling this class
	If Name = "" Quit $$$OK
	
	; If no conversion requested, we don't need a setter
	Set Conversion = $Get(%parameter("Conversion"))
	If (Conversion = "") Quit $$$OK
	
	; Custom setter is only possible on non-collection properties
	If $$$comMemberKeyGet(%class.Name, $$$cCLASSproperty, Name, $$$cPROPruntimetype) [ "%Collection" {
		Set Msg = "Property {}: conversion ({}) not possible for collection properties."
		Quit $$$BuildStatus(Msg, , Name, Conversion)
	}
	
	If Conversion = "Str" {
		; Convert to string
		Set Value = "$s($isobject(%val):%val.%ToJSON(),1:%val)"
		
	} ElseIf Conversion = "JSON" {
		; Convert to JSON object, if possible
		Set Value = "$s(%val="""":"""",""[{""[$e(%val):##class(%DynamicAbstractObject).%FromJSON(%val),1:%val)"
		
	} Else {
		Quit $$$BuildStatus("Property {}: unknown Conversion '{}'.", , Name, Conversion)
		
	}
	
	Do %code.WriteLine($Char(9)_"Set i%"_Name_"="_Value)
	Do %code.WriteLine($Char(9)_"Quit $$$OK")
	
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="AsString">
<Description>
Returns the property value as a string, even if it is a %DynamicObject
(or -Array).</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If '$IsObject(%val) Quit %val
	Quit %val.%ToJSON()
]]></Implementation>
</Method>

<Method name="AsObject">
<Description>
Returns the property value as a %DynamicObject (or -Array),
if possible, even if it is a string.</Description>
<ReturnType>%DynamicAbstractObject</ReturnType>
<Implementation><![CDATA[
	If $IsObject(%val) Quit %val
	If %val = "" Quit ""
	Quit ##class(%DynamicAbstractObject).%FromJSON(%val)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="LogicalToStorage">
<Description>
Converts %DynamicObject to the equivalent JSON when storing.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>%val</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If '$IsObject(%val) Quit %val
	Quit %val.%ToJSON()
]]></Implementation>
</Method>

<Method name="StorageToLogical">
<Description>
Reload value from disk: convert value back to %DynamicObject
(or -Array), if it was one.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>%val</FormalSpec>
<NoContext>1</NoContext>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set Name = %property
	
	; If name is empty we're compiling this class
	If Name = "" Quit $$$OK
	
	If %parameter("Conversion")="JSON" {
		; Convert to JSON object, if possible
		Set Value = "$s(%val="""":"""",""[{""[$e(%val):##class(%DynamicAbstractObject).%FromJSON(%val),1:%val)"
		
	} Else {
		; Don't change anything here
		Set Value = "%val"
		
	}
	
	Do %code.WriteLine($Char(9)_"Quit "_Value)
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
