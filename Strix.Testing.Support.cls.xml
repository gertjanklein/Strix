<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.Testing.Support">
<Description>
Support code for tests.</Description>
<IncludeCode>Strix</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63863,39872.663386</TimeCreated>

<Method name="CreateClass">
<Description>
Creates a class with the specified name. If a class
by that name already exists, it is deleted.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String,Super:%String="%Persistent",*ClassDef:%Dictionary.ClassDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Kill existing extent (if any)
	Set Status = ..KillExtent(ClassName)
	If 'Status Quit Status
	
	If ##class(%Dictionary.ClassDefinition).%ExistsId(ClassName) {
		Set Status = ##class(%Dictionary.ClassDefinition).%DeleteId(ClassName)
		If 'Status Quit $$$BuildErr("Error deleting test class '"_ClassName_"'", Status)
	}
	
	Set ClassDef = ##class(%Dictionary.ClassDefinition).%New()
	Set ClassDef.Name = ClassName
	Set ClassDef.Super = Super
	Set ClassDef.ProcedureBlock = 1
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SetClassParameter">
<Description>
Adds or updates a class parameter with the given value</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassDef:%Dictionary.ClassDefinition,Name:%String,Value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim pd As %Dictionary.ParameterDefinition
	Set pd = ##class(Strix.Generator.Utilities).GetInCollection(ClassDef.Parameters, Name, 1, .Status)
	Set pd.Default = Value
	Quit Status
]]></Implementation>
</Method>

<Method name="GetProperty">
<Description>
Returns the property definition for the property with Name in ClassDef,
or an empty string if no such property exists.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassDef:%Dictionary.ClassDefinition,Name:%String</FormalSpec>
<ReturnType>%Dictionary.PropertyDefinition</ReturnType>
<Implementation><![CDATA[
	Set Key = ""
	For  {
		Set PropDef = ClassDef.Properties.GetNext(.Key)
		If Key = "" Quit
		If PropDef.Name = Name Return PropDef
	}
	Quit ""
]]></Implementation>
</Method>

<Method name="AddProperty">
<Description>
Adds a new property to an existing class definition.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassDef:%Dictionary.ClassDefinition,Name:%String,Type:%String,Collection:%String=""</FormalSpec>
<ReturnType>%Dictionary.PropertyDefinition</ReturnType>
<Implementation><![CDATA[
	Set Property = ##class(%Dictionary.PropertyDefinition).%New()
	Set Property.Name = Name
	Set Property.Type = Type
	Set Property.Collection = Collection
	Do ClassDef.Properties.Insert(Property)
	Quit Property
]]></Implementation>
</Method>

<Method name="SetPropertyParameter">
<Description>
Sets a property parameter value</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassDef:%Dictionary.ClassDefinition,PropertyName:%String,ParameterName:%String,Value:%String="",Compile:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	; Find property definition
	
	Set Key = ""
	For  {
		Set PropDef = ClassDef.Properties.GetNext(.Key)
		If Key = "" Quit
		If PropDef.Name = PropertyName Quit
	}
	If Key = "" Quit $$$BuildStatus("No property '{} found.",, PropertyName)
	
	; Set parameter
	
	Do PropDef.Parameters.SetAt(Value, ParameterName)
	
	; Compile if so requested
	
	If Compile Quit ..SaveAndCompile(ClassDef)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SaveAndCompile">
<Description>
Saves and compiles the class passed as a class definition.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassDef:%Dictionary.ClassDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Status = ClassDef.%Save()
	If 'Status Quit $$$BuildErr("Error saving class '"_ClassDef.Name_"'", Status)
	
	Set Status = $System.OBJ.Compile(ClassDef.Name, "cko0-d")
	If 'Status Quit $$$BuildErr("Error compiling class '"_ClassDef.Name_"'", Status)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="RemoveClass">
<Description>
Remove a class and any data it may contain.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Status = ..KillExtent(ClassName)
	If 'Status Quit Status
	
	;Delete the class itself
	Set Status = $System.OBJ.Delete(ClassName, "-d")
	If 'Status Quit $$$BuildErr("Error deleting test class '"_ClassName_"'", Status)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="KillExtent">
<Description>
Removes the extent for a class if it has one and is compiled.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;If %KillExtent doesn't exist or isn't runnable we're done
	If '##class(%Dictionary.CompiledMethod).%ExistsId(ClassName_"||%KillExtent") Quit $$$OK
	
	Set Status = $ZObjClassMethod(ClassName, "%KillExtent")
	If 'Status Quit $$$BuildErr("Error clearing extent for class '"_ClassName_"'", Status)
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
