<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.SCM.Handler">
<Description>
Base handler: determines the appropriate handler to use.</Description>
<IncludeCode>Strix.SCM</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63864,78375.457203</TimeCreated>

<Method name="Get">
<Description>
Returns the appropriate handler for the document specified in
parameter InternalName.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String="",*Status:%Status</FormalSpec>
<ReturnType>Strix.SCM.Handler.Base</ReturnType>
<Implementation><![CDATA[
	;Determine which project(s), if any, own this item
	Set ProjectIds = ##class(Strix.SCM.Project).ProjectsOwningItem(InternalName, .Status)
	If 'Status {
		Set Status = $$$BuildErr("Error determining projects owning '"_InternalName_"':", Status)
		Quit ##class(Strix.SCM.Handler.Base).%New()
	}
	;We need exactly one project
	If $ListLength(ProjectIds) '= 1 Quit ##class(Strix.SCM.Handler.Base).%New()
	
	;Open project
	Set ProjectId = $List(ProjectIds)
	Set Project = ##class(Strix.SCM.Project).%OpenId(ProjectId, , .Status)
	If 'Status {
		Set Status = $$$BuildErr("Error opening project '"_ProjectId_"' for '"_InternalName_"':", Status)
		Quit ##class(Strix.SCM.Handler.Base).%New()
	}
	
	;Determine handler class
	Set HandlerClass = Project.Handler
	If HandlerClass = "" Quit ##class(Strix.SCM.Handler.Base).%New()
	
	;Create instance
	Try {
		Set Handler = $ZObjClassMethod(HandlerClass, "%New")
	} Catch e {
		Set Status = $$$BuildErr("Error opening handler class '"_HandlerClass_"' instance:", e.AsStatus())
		Set Handler = ##class(Strix.SCM.Handler.Base).%New()
	}
	
	Quit Handler
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Studio menu handlers

]]></Content>
</UDLText>

<Method name="UserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,SelectedText:%String,&Action:%String,&Target:%String,&Msg:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.UserAction(Type, Name, InternalName, SelectedText, .Action, .Target, .Msg, .Reload)
]]></Implementation>
</Method>

<Method name="OnMenuItem">
<FormalSpec><![CDATA[MenuName:%String,InternalName:%String,SelectedText:%String,&Enabled:%Boolean,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.OnMenuItem(MenuName, InternalName, SelectedText, .Enabled, .DisplayName)
]]></Implementation>
</Method>

<Method name="AfterUserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,Answer:%Integer,Msg:%String="",&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.AfterUserAction(Type, .Name, InternalName, Answer, Msg, .Reload)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Studio callbacks

]]></Content>
</UDLText>

<Method name="OnBeforeLoad">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.OnBeforeLoad(InternalName)
]]></Implementation>
</Method>

<Method name="OnAfterLoad">
<FormalSpec>InternalName:%String,Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.OnAfterLoad(InternalName, Object)
]]></Implementation>
</Method>

<Method name="OnBeforeSave">
<FormalSpec>InternalName:%String,Location:%String="",Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.OnBeforeSave(InternalName, Location, Object)
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<FormalSpec>InternalName:%String,Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.OnAfterSave(InternalName, Object)
]]></Implementation>
</Method>

<Method name="OnAfterStorage">
<FormalSpec>InternalName:%String,Location:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.OnAfterStorage(InternalName, Location)
]]></Implementation>
</Method>

<Method name="OnBeforeCompile">
<FormalSpec><![CDATA[InternalName:%String,&qstruct:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.OnBeforeCompile(InternalName, .qstruct)
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.OnAfterCompile(InternalName)
]]></Implementation>
</Method>

<Method name="OnBeforeDelete">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.OnBeforeDelete(InternalName)
]]></Implementation>
</Method>

<Method name="OnAfterDelete">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(InternalName, .Status)
	If 'Status Quit Status
	Quit Handler.OnAfterDelete(InternalName)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Other forwarded methods

]]></Content>
</UDLText>

<Method name="GetMainMenus">
<FormalSpec>*Status:%Status</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(, .Status)
	If 'Status Quit ""
	Quit Handler.GetMainMenus(.Status)
]]></Implementation>
</Method>

<Method name="GetMenuItems">
<FormalSpec>*Status:%Status</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	#dim Handler As Strix.SCM.Handler.Base
	Set Handler = ..Get(, .Status)
	If 'Status Quit ""
	Quit Handler.GetMenuItems(.Status)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Helpers

]]></Content>
</UDLText>

<Method name="GetHandlers">
<Description>
Returns a list of classnames of all available handlers.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*Handlers:%ListOfDataTypes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Handlers = ##class(%ListOfDataTypes).%New()
	
	Set stm = ##class(%SQL.Statement).%New()
	Set sc = stm.%PrepareClassQuery("%Dictionary.ClassDefinitionQuery","SubclassOf")
	If 'sc Quit $$$BuildErr("Error preparing SubclassOf query:", sc)
	#dim rs As %SQL.StatementResult
	Set rs = stm.%Execute("Strix.SCM.Handler.Base")
	
	While rs.%Next() {
		Set Name = rs.%Get("Name")
		Do Handlers.Insert(Name)
	}
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
