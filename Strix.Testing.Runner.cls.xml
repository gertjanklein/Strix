<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.Testing.Runner">
<IncludeCode>Strix</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63861,42599.26957</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Property name="Debug">
<Description>
Debug flag; when set and an assertion fails, a Break is executed.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Property name="TestRunStart">
<Description>
Date/time the test run started</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$ZDateTime($ZUtil(188), 3, 1, 3)</InitialExpression>
</Property>

<Property name="TestRunDone">
<Description>
Date/time the test run finished</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="Results">
<Description>
Information on test failures, trapped errors, etc.</Description>
<Type>Strix.Testing.Info</Type>
<Collection>list</Collection>
<Parameter name="STORAGEDEFAULT" value="array"/>
</Property>

<Property name="TestCases">
<Description>
Number of testcases (classes) seen in this test run</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Tests">
<Description>
Number of tests (methods) seen in this test run</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Asserts">
<Description>
Total number of asserts in this test run</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Failed">
<Description>
Number of failed asserts in this test run</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Skipped">
<Description>
Number of skipped tests in this test run</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Errors">
<Description>
Number errors trapped/returned in this test run</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Property name="CurrentTestClass">
<Description>
Bookkeeping: current testcase</Description>
<Type>%String</Type>
<Private>1</Private>
<Transient>1</Transient>
</Property>

<Property name="CurrentTestMethod">
<Description>
Bookkeeping: current testcase method</Description>
<Type>%String</Type>
<Private>1</Private>
<Transient>1</Transient>
</Property>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="Run">
<Description>
Runs all tests in the specified package.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Package:%String,Debug:%Boolean=0,*Runner:Strix.Testing.Runner</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Runner = ..%New()
	Set Runner.Debug = Debug
	
	Set (ClassName, MethodName) = ""
	If Package [ ":" {
		Set ClassName = $Piece(Package, ":", 1)
		Set MethodName = $Piece(Package, ":", 2)
		
	} ElseIf ##class(%Dictionary.ClassDefinition).%ExistsId(Package) {
		Set ClassName = Package
		
	}
	
	If ClassName '= "" {
		Set sc = Runner.RunClass(ClassName, MethodName)
		If 'sc Do Runner.RecordError("Error running testcase '"_ClassName_"'", sc)
		Set Runner.TestRunDone = $ZDateTime($ZUtil(188), 3, 1, 3)
		Do Runner.ReportToTerminal()
		
	} Else {
		Set sc = Runner.RunPackage(Package)
		If 'sc Quit sc
		
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="RunPackage">
<FormalSpec>Package:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = $System.OBJ.GetPackageList(.Classes, Package, "/includesubpackages")
	If 'sc Quit $$$BuildErr("Error creating list of classes in '"_Package_"'", sc)
	
	Set ClassName = ""
	For  {
		Set ClassName = $Order(Classes(ClassName))
		If ClassName = "" Quit
		
		;Skip uncompiled classes
		If '##class(%Dictionary.CompiledClass).%ExistsId(ClassName) Continue
		
		;Skip classes not inheriting from the test superclass
		If '$ZObjClassMethod(ClassName, "%IsA", "Strix.Testing.TestCase") Continue
		
		Set sc = ..RunClass(ClassName)
		If 'sc Do ..RecordError("Error running testcase '"_ClassName_"'", sc)
	}
	
	Set ..TestRunDone = $ZDateTime($ZUtil(188), 3, 1, 3)
	
	Do ..ReportToTerminal()
	
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="RunClass">
<Description>
Runs test methods in the specified subclass of Strix.Testing.TestCase</Description>
<FormalSpec>ClassName:%String,TestToRun:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..CurrentTestClass = ClassName, ..CurrentTestMethod = ""
	Set ..TestCases = ..TestCases + 1
	
	#dim TestObject As Strix.Testing.TestCase
	Set TestObject = $ZObjClassMethod(ClassName, "%New")
	If '$IsObject(TestObject) Quit $$$BuildErr("Error creating instance of '"_ClassName_"'", %objlasterror)
	Set TestObject.Runner = ##this
	
	Set sc = ..GetTestMethods(ClassName, .MethodNames)
	If 'sc Quit $$$BuildErr("Error determining test methods in class '"_ClassName_"'", sc)
	
	;Run setup
	Set ..CurrentTestMethod = "Setup"
	Set sc = TestObject.Setup()
	If 'sc Quit $$$BuildErr("Error running Setup", sc)
	
	Set FailedMethods = ""
	#dim MethodNames As %ListOfDataTypes
	For i = 1:1:MethodNames.Count() {
		Set MethodName = MethodNames.GetAt(i)
		If TestToRun '= "", TestToRun '= MethodName Continue
		Do ..RunMethod(TestObject, MethodName, .Failures, .Errors)
		If Failures + Errors Set FailedMethods = FailedMethods_$lb(MethodName)
	}
	
	;Run teardown
	Set ..CurrentTestMethod = "TearDown"
	Set sc = TestObject.TearDown($lts(FailedMethods))
	If 'sc Quit $$$BuildErr("Error running TearDown", sc)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="RunMethod">
<Description>
Runs a single test method on the test object. Traps and returns any error.</Description>
<FormalSpec>TestObject:Strix.Testing.TestCase,MethodName:%String,*Failed:%Integer,*Errors:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set $ZTrap = "Error"
	
	Set ..CurrentTestMethod = MethodName
	If ..CurrentTestClass = "" Set ..CurrentTestClass = TestObject.%ClassName(1)
	Set ..Tests = ..Tests + 1
	
	Set CurrentFailed = ..Failed, CurrentErrors = ..Errors
	Do $ZObjMethod(TestObject, MethodName)
	Set Failed = ..Failed - CurrentFailed
	Set Errors = ..Errors - CurrentErrors
	
	Quit
	
	
Error
	Set $ZTrap = ""
	
	Do ..RecordError("Error running test method '"_MethodName_"': "_$ZError)
	Set Failed = ..Failed - CurrentFailed
	Set Errors = ..Errors - CurrentErrors
	
	Quit
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="GetTestMethods">
<Description>
Returns a list of method names in the specified class starting with Test.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String,Methods:%ListOfDataTypes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Methods = ##class(%ListOfDataTypes).%New()
	
	&sql(DECLARE C CURSOR FOR
	      SELECT Name INTO :Name
	        FROM %Dictionary.MethodDefinition
	       WHERE parent->Name = :ClassName
	         AND Name LIKE 'Test%')
	&sql(OPEN C)
	
	For  {
		&sql(FETCH C)
		If SQLCODE Quit
		
		Do Methods.Insert(Name)
	}
	&sql(CLOSE C)
	
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="RecordAssertionOk">
<Description>
Records a successful assertion (mainly for counting)</Description>
<Implementation><![CDATA[
	Set ..Asserts = ..Asserts + 1
	Quit
]]></Implementation>
</Method>

<Method name="RecordAssertionFailed">
<Description>
Records a failed assertion.</Description>
<FormalSpec>AssertionType:%String,Expected:%String="",Result:%String="",Description:%String=""</FormalSpec>
<ReturnType>Strix.Testing.Info</ReturnType>
<Implementation><![CDATA[
	Set ..Failed = ..Failed + 1
	Set Info = ##class(Strix.Testing.Info).Get("Fail", ..CurrentTestClass, ..CurrentTestMethod, AssertionType, Expected, Result, Description)
	Do ..Results.Insert(Info)
	Quit Info
]]></Implementation>
</Method>

<Method name="RecordTestSkipped">
<Description>
Records a test skip.</Description>
<FormalSpec>Reason:%String=""</FormalSpec>
<ReturnType>Strix.Testing.Info</ReturnType>
<Implementation><![CDATA[
	Set ..Skipped = ..Skipped + 1
	Set Info = ##class(Strix.Testing.Info).Get("Skip", ..CurrentTestClass, ..CurrentTestMethod, , , , Reason)
	Do ..Results.Insert(Info)
	Quit Info
]]></Implementation>
</Method>

<Method name="RecordError">
<Description>
Records an error (e.g. trapped error, error status, etc.).</Description>
<FormalSpec>Description:%String="",Status:%Status=""</FormalSpec>
<ReturnType>Strix.Testing.Info</ReturnType>
<Implementation><![CDATA[
	Set ..Errors = ..Errors + 1
	Set Info = ##class(Strix.Testing.Info).GetForError(..CurrentTestClass, ..CurrentTestMethod, Description, Status)
	Do ..Results.Insert(Info)
	Quit Info
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="ReportToTerminal">
<Description>
Writes test run results to the terminal</Description>
<Implementation><![CDATA[
	If $X Write !
	Write !
	
	Write "Tests started at "_..TestRunStart_" and completed at "_..TestRunDone_".",!
	Write "Ran "_..Tests_" tests in "_..TestCases_" testcases.",!
	Write "A total of "_..Asserts_" assertions were successful; "_..Skipped_" were skipped.",!
	Write "There were "_..Failed_" failed assertions and "_..Errors_" errors.",!
	
	If '..Results.Count() Quit
	Write !,"Details below:",!
	
	For i = 1:1:..Results.Count() {
		#dim Info As Strix.Testing.Info
		Set Info = ..Results.GetAt(i)
		
		Write !,"#"_i_" "_Info.ClassName_":"_Info.MethodName_":",!
		Do Info.ReportToTerminal()
	}
]]></Implementation>
</Method>
</Class>
</Export>
