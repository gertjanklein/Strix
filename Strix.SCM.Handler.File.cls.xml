<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.SCM.Handler.File">
<Description>
Handles sources by synchronizing with a file system directory.
Checkin/out etc. is expected to be handled by an external program.</Description>
<Super>Strix.SCM.Handler.Base</Super>
<TimeCreated>63864,76212.606502</TimeCreated>

<Property name="SyncToDisk">
<Description>
Whether to synchronize the file on each save. This ensures the file is
always kept up to date with the Cach√©-version.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// ===== Studio menu actions

]]></Content>
</UDLText>

<Method name="UserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,SelectedText:%String,&Action:%String,&Target:%String,&Msg:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Assume we won't handle this action
	Set Action = 0, Target = "", Msg = "", Reload = 0
	
	;Studio-generated action (as opposed to menu item)
	If Type = 1 Quit $$$OK
	
	
	;===== Get project
	
	If InternalName = "" Quit $$$OK
	
	#dim Project As Strix.SCM.Project
	If '##class(Strix.SCM.Project).CheckItem(.InternalName, .Project, .AsItem, .AsStorage, .Msg) {
		If Msg '= "" Set Action = 6 ; MesssageBox
		Quit $$$OK
	}
	
	
	;== Export item
	
	If Name = "Source control,ExportItem", AsItem {
		Set Status = ##class(Strix.SCM.FileIO).ExportItem(Project, InternalName, .Filename)
		If 'Status Quit Status
		Write !,"== "_InternalName_" exported to "_Filename_"."
		Quit $$$OK
	}
	
	
	;== Export class data
	
	If Name = "Source control,ExportData", AsStorage {
		Set Status = ##class(Strix.SCM.FileIO).ExportClassData(Project, InternalName, .Filename)
		If 'Status Quit Status
		Write !,"== "_InternalName_" data exported to "_Filename_"."
		Quit $$$OK
	}
	
	
	;== Export project
	
	If Name = "Source control,ExportProject" {
		Set Action = 1 ;Yes/no/cancel
		Set Target = "Are you sure you want to export the entire project '"_Project.Name_"' to the working copy?"
		Quit $$$OK
	}
	
	
	;== Import project
	
	If Name = "Source control,ImportProject" {
		Set Action = 1 ;Yes/no/cancel
		Set Target = "Are you sure you want to import the entire project '"_Project.Name_"' from the working copy?"
		Quit $$$OK
	}
	
	
	;== Reload item
	
	If Name = "Source control,LoadItem", AsItem {
		Set Filename = Project.GetExportFilename(InternalName, , , .Status)
		If 'Status Quit Status
		Set Action = 1 ;Yes/no/cancel
		Set Target = "Are you sure you want to reload '"_InternalName_"' from file '"_Filename_"'?"
		Quit $$$OK
	}
	
	
	;== Reload data
	
	If Name = "Source control,LoadData", AsStorage {
		Set StorageName = InternalName, $$$ItemType(StorageName) = "stg"
		Set Filename = Project.GetExportFilename(StorageName, , , .Status)
		If 'Status Quit Status
		Set Action = 1 ;Yes/no/cancel
		Set Target = "Are you sure you want to reload data for '"_InternalName_"' from file '"_Filename_"'?"
		Quit $$$OK
	}
	
	
	;== Open folder
	
	If Name = "Source control,OpenFolder" {
		Set FullPath = Project.GetExportFilename(InternalName, .Directory, .Filename)
		Set Action = 3 ; Run exe
		Set Target = ..GetExplorerCommand(Directory, Filename)
		Quit $$$OK
	}
	
	
	;===== Fallback to Base handler
	
	Quit ##super(Type, Name, InternalName, SelectedText, .Action, .Target, .Msg, .Reload)
]]></Implementation>
</Method>

<Method name="AfterUserAction">
<Description>
Implements actions that should only be done after user confirmation and/or input.</Description>
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,Answer:%Integer,Msg:%String="",&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Reload = 0
	
	;Studio-generated action (as opposed to menu item)
	If Type = 1 Quit $$$OK
	
	;User says no
	If Answer = 0 Quit $$$OK  ; No
	If Answer = 2 Quit $$$OK  ; Cancel
	
	
	;===== Get project
	
	#dim Project As Strix.SCM.Project
	If InternalName = "" Quit $$$OK
	If '##class(Strix.SCM.Project).CheckItem(.InternalName, .Project, .AsItem, .AsStorage, .Msg) Quit $$$OK
	
	
	;== Export project
	
	If Name = "Source control,ExportProject" {
		Set Status = ##class(Strix.SCM.FileIO).ExportProject(Project)
		If 'Status Quit Status
		Write "== Export of project finished successfully.",!
		Quit $$$OK
	}
	
	
	;== Import project
	
	If Name = "Source control,ImportProject" {
		Set Status = ##class(Strix.SCM.FileIO).ImportProject(Project)
		If 'Status Quit Status
		Write "== Import of project finished successfully.",!
		Quit $$$OK
	}
	
	
	;== Reload item
	
	If Name = "Source control,LoadItem" {
		Set Status = ##class(Strix.SCM.FileIO).LoadItem(Project, InternalName, .Filename)
		If 'Status Quit Status
		Write !,"== Loaded "_InternalName_" from "_Filename_"."
		Quit $$$OK
	}
	
	;== Reload data
	
	If Name = "Source control,LoadData" {
		Set Status = ##class(Strix.SCM.FileIO).LoadClassData(Project, InternalName, .Filename)
		If 'Status Quit Status
		Write !,"== Loaded data for "_InternalName_" from "_Filename_"."
		Quit $$$OK
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnMenuItem">
<Description>
Called when a menu item is to be displayed; determines what to display,
and whether the item should be enabled or not.</Description>
<FormalSpec><![CDATA[MenuName:%String,InternalName:%String,SelectedText:%String,&Enabled:%Boolean,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;Top level menus always enabled
	If MenuName '[ "," Set Enabled = 1 Quit $$$OK
	
	;Get display name:
	Set ItemName = $Piece(MenuName, ",", 2)
	Set DisplayName = $Case(ItemName,
	  "ExportItem":          "Save item to disk",
	  "ExportData":          "Save data for item to disk",
	  "LoadItem":            "Reload item from disk",
	  "LoadData":            "Reload data for item from disk",
	  "ExportProject":       "Save project to disk",
	  "ImportProject":       "Load project from disk",
	  "OpenFolder":          "Open working copy folder",
	  "LaunchUserInterface": "Open user interface",
	  : MenuName
	)
	
	;===== Menus that don't depend on a known item
	
	If ItemName = "LaunchUserInterface" {
		Set Enabled = 1
		Quit $$$OK
	}
	
	;===== Menus that depend on a known item
	
	#dim Project As Strix.SCM.Project
	If ##class(Strix.SCM.Project).CheckItem(.InternalName, .Project, .AsItem, .AsStorage) {
		;Default: enabled if known as item, otherwise not
		Set Enabled = $Select(AsItem: 1, 1: 0)
		
		;Exceptions:
		If ItemName = "ReloadItem" {
			If AsItem {
				Set Filename = Project.GetExportFilename(InternalName, , , .Status)
				Set Enabled = ##class(%File).Exists(Filename)
			} Else {
				Set Enabled = 0
			}
			
		} ElseIf (ItemName = "ExportData") || (ItemName = "LoadData") {
			Set Enabled = $Select(AsStorage: 1, 1: -1)
			
		}
		
	} Else {
		;Item unknown in project: don't display at all
		Set Enabled = -1
		
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Studio callbacks

]]></Content>
</UDLText>

<Method name="OnAfterSave">
<FormalSpec>InternalName:%String,Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '..SyncToDisk Quit $$$OK
	If InternalName = "" Quit $$$OK
	
	#dim Project As Strix.SCM.Project
	If '##class(Strix.SCM.Project).CheckItem(.InternalName, .Project, .AsItem, .AsStorage, .Msg) {
		Write Msg,!
		Quit $$$OK
	}
	
	Set Status = ##class(Strix.SCM.FileIO).ExportItem(Project, InternalName, .Filename)
	If 'Status Quit Status
	
	Write !,"== "_InternalName_" exported to "_Filename_"."
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description>
Compilation may have changed storage.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..OnAfterSave(InternalName)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Menus and menu items

]]></Content>
</UDLText>

<Method name="GetMenuItems">
<Description>
Returns a list of menu items for the top-level menu. In addition to
the menu name, the name of the current document and the currently
selected text are passed in.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>MenuName:%String,InternalName:%String,SelectedText:%String,*Status:%Status</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	Set Status = $$$OK
	
	;Items is a list of lists containing:
	;  Name, Enabled, Save before execute, is separator
	
	Set Items = ##super(MenuName, InternalName, SelectedText, .Status)
	If 'Status Quit Items
	
	Set Items = Items_$lb(
	  ;Name, Enabled, Save before execute, is separator
  	$lb("OpenFolder", 1, 0, 0),
  	$lb("", 1, 0, 1),
	  $lb("ExportProject", 1, 1, 0),
	  $lb("ImportProject", 1, 0, 0),
  	$lb("", 1, 0, 1),
	  $lb("ExportItem", 1, 1, 0),
	  $lb("ExportData", 0, 0, 0),
	  $lb("LoadItem", 1, 1, 0),
	  $lb("LoadData", 0, 0, 0)
	)
	
	Quit Items
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ===== Helpers

]]></Content>
</UDLText>

<Method name="GetExplorerCommand">
<Description>
Returns a command to open explorer in the given directory. Optionally,
a file to pre-select can be specified.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Directory:%String,File:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If File '= "" {
		Set Path = ##class(%File).SubDirectoryName(Directory, File)
		If '##class(%File).Exists(Path) Set File = ""
	}
	
	If File = "" {
		Set Cmd = "C:\Windows\explorer.exe /e /root,"_Directory
	} Else {
		Set Cmd = "C:\Windows\explorer.exe /e,/select,"_Path
	}
	
	Quit Cmd
]]></Implementation>
</Method>
</Class>
</Export>
