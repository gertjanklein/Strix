<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.Lib.Collections">
<Super>%RegisteredObject</Super>
<TimeCreated>64689,65760.815582</TimeCreated>

<Method name="CommonListElements">
<Description>
Returns the elements present in all the input lists. These may
be specified as a single list of lists, or as separate parameters.
The items are returned in the order they appear in in the first list.
If objects are passed in, they are compared by Oref, i.e. they have
to be the same object to qualify.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Input...:%Collection.Super</FormalSpec>
<ReturnType>%Collection.AbstractList</ReturnType>
<Implementation><![CDATA[
	; Determine how the lists were passed in
	
	If Input > 1 {
		; Lists specified separately; create container list for code below
		Set Container = ##class(%ListOfObjects).%New()
		For i = 1:1:Input Do Container.Insert(Input(i))
	} Else {
		Set Container = Input(1)
	}
	
	; Get first list from lists container
	
	Set Items = Container.GetAt(1)
	
	; Determine type and return type
	
	Set Result = ..GetCopy(Items)
	
	; Find elements present in all lists
	
	For i = 1:1:Items.Count() {
		Set Item = Items.GetAt(i)
		
		Set Present = 1
		For j = 2:1:Container.Count() {
			Set Test = Container.GetAt(j)
			If Test.%Extends("%Collection.AbstractListOfObj") {
				If Test.FindOref(Item) Continue
			} Else {
				If Test.Find(Item) Continue
			}
			Set Present = 0
			Quit
		}
		If 'Present Continue
		
		Do Result.Insert(Item)
	}
	
	Quit Result
]]></Implementation>
</Method>

<Method name="GetCopy">
<Description>
Returns an empty copy of a collection object, of the same type as
the input collection, but one that can exist stand-alone. (The
%Collection classes can only exists as properties of an object.)
The collection contents are not copied.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Input:%Collection.AbstractIterator</FormalSpec>
<ReturnType>%Collection.AbstractIterator</ReturnType>
<Implementation><![CDATA[
	; Not a %Collection-type property: return a new instance of the same type
	If Input.%PackageName() '= "%Collection" Quit Input.%New()
	
	Set Name = Input.%ClassName()
	
	If Name = "ListOfDT" Quit ##class(%ListOfDataTypes).%New()
	If Name = "ListOfObj" Quit ##class(%ListOfObjects).%New()
	
	If Name = "ArrayOfDT" Quit ##class(%ArrayOfDataTypes).%New()
	If Name = "ArrayOfObj" Quit ##class(%ArrayOfObjects).%New()
	
	If Name = "ListOfObjCN" Quit ##class(%ListOfObjectsWithClassName).%New()
	If Name = "ArrayOfObjCN" Quit ##class(%ArrayOfObjectsWithClassName).%New()
	
	If Name = "ListOfStream" Quit ##class(%ListOfObjects).%New()
	If Name = "ArrayOfStream" Quit ##class(%ArrayOfObjects).%New()
	
	; If none of the above matches, attempt %New and hope for the best
	Quit Input.%New()
]]></Implementation>
</Method>
</Class>
</Export>
