<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.CSV.ToClass">
<IncludeCode>Strix</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>65025,42303.833561</TimeCreated>

<Property name="Data">
<Description>
Data to deduce class from. Must include header row.</Description>
<Type>%Stream.Object</Type>
</Property>

<Property name="SkipCount">
<Description>
Number of lines to skip before reading header line</Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Separator">
<Description>
The separator to use in parsing the CSV data</Description>
<Type>%String</Type>
<InitialExpression>","</InitialExpression>
</Property>

<Property name="ClassName">
<Description>
Name of the class to create</Description>
<Type>%String</Type>
</Property>

<Property name="SuperClass">
<Description>
Superclass(es) for the class to create</Description>
<Type>%String</Type>
<InitialExpression>"%RegisteredObject,Strix.CSV.Adaptor"</InitialExpression>
</Property>

<Property name="CsvNameParameter">
<Description>
Name of the property parameter for storing the column header.
If empty, this property parameter will not be generated.</Description>
<Type>%String</Type>
<InitialExpression>"CsvColumnHeader"</InitialExpression>
</Property>

<Property name="CsvIndexParameter">
<Description>
Name of the property parameter for storing the column number.
If empty, this property parameter will not be generated.</Description>
<Type>%String</Type>
<InitialExpression>"CsvColumnNr"</InitialExpression>
</Property>

<Property name="ResetClass">
<Description>
When an existing class is regenerated, an attempt is made to keep
existing property types and parameters. If ResetClass is true,
all existing properties will be regenerated with their default
settings. Additionally, the storage for the class will be removed.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="CreateFromFile">
<Description>
Create a class ClassName that can be used to hold a record
in the CSV in file FileName.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>FileName:%String,ClassName:%String,Separator:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Me = ..%New(.ClassName, .Separator)
	Set Me.Data = ##class(%FileCharacterStream).%New()
	Set Status = Me.Data.LinkToFile(FileName)
	If 'Status Quit $$$BuildStatus("Error linking to file '{}':", Status, FileName)
	Set Status = Me.Create()
	If 'Status Quit Status
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="Create">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Parser As Strix.CSV.Parser
	Set Status = ..GetParser(.Parser)
	If 'Status Quit Status
	
	#dim ClassDef As %Dictionary.ClassDefinition
	Set ClassDef = ##class(Strix.Generator.Utilities).GetClassDef(..ClassName, .IsNew, .Status)
	If 'Status Quit $$$BuildStatus("Can't create/open class definition for '{}':", Status, ..ClassName)
	Set ClassDef.Super = ..SuperClass
	
	If ..ResetClass {
		; Clear storage
		Do ClassDef.Storages.Clear()
	} Else {
		; Get existing property definitions (if any) to take datatype etc. from
		Do ..GetExistingProperties(ClassDef, .ExistingProperties)
	}
	
	; Remove all existing properties from the class definition
	Set Status = ClassDef.Properties.Clear()
	If 'Status Quit $$$BuildStatus("Can't clear existing properties in '{}':", Status, ..ClassName)
	
	For ColumnNr = 1:1:Parser.Data {
		Set ColumnName = Parser.Data(ColumnNr)
		If ColumnName = "" Continue
		
		Set PropertyName = ..GetPropertyName(ColumnName)
		If '$ZName(PropertyName, 6) Return $$$BuildStatus("Can't determine valid property name for column '{}' (tried '{}').",, ColumnName, PropertyName)
		
		;Check for multiple column headers with the same name
		If $Increment(PropertyNames(PropertyName)) > 1 {
			Return $$$BuildStatus("Property {} (column {}) occurs more than once.", , PropertyName, ColumnName)
		}
		
		#dim PropDef As %Dictionary.PropertyDefinition
		Set PropDef = ##class(Strix.Generator.Utilities).GetInCollection(ClassDef.Properties, PropertyName, 1, .Status)
		If 'Status Return $$$BuildStatus("Can't create/open property definition for column '{}', property '{}':", Status, ColumnName, PropertyName)
		
		Set PropDef.SequenceNumber = ColumnNr
		
		#dim Existing As %Dictionary.PropertyDefinition
		Set ParmName = $Select(..CsvNameParameter '= "": ColumnName, 1: ColumnNr)
		If $Data(ExistingProperties(ParmName), Existing) {
			; Keep existing type and property parameters
			Set PropDef.Type = Existing.Type
			Set PropDef.Parameters = Existing.Parameters
		} Else {
			Set Status = ..DetermineDataType(ColumnNr, ColumnName, PropDef)
			If 'Status Return Status
		}
		
		; Set the custom property parameter(s) for CSV column name and/or index.
		If ..CsvNameParameter '= "" Do PropDef.Parameters.SetAt(ColumnName, ..CsvNameParameter)
		If ..CsvIndexParameter '= "" Do PropDef.Parameters.SetAt(ColumnNr, ..CsvIndexParameter)
	}
	
	Set Status = ClassDef.%Save()
	If 'Status Quit $$$BuildStatus("Error saving class definition:", Status)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetParser">
<Description>
Sets up the parser and reads the column header line.
Can be overridden to skip lines etc.</Description>
<FormalSpec>*Parser:Strix.CSV.Parser</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Parser = ##class(Strix.CSV.Parser).GetParser(..Data, ..Separator, ..SkipCount)
	If 'Parser.Next(.Status) Quit $$$BuildStatus("Can't read first row from input:", Status)
	If Parser.Data < 2 Quit $$$BuildStatus("Only one column found; is separator correct?")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DetermineDataType">
<FormalSpec>ColumnNr:%Integer,ColumnName:%String,PropDef:%Dictionary.PropertyDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set PropDef.Type = "%String"
	Do PropDef.Parameters.SetAt("", "MAXLEN")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetPropertyName">
<Description>
Derive a valid Cach√© property name from a column header.</Description>
<FormalSpec>ColumnName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $ZName(ColumnName, 6) Quit ColumnName
	
	Set Name = ""
	For i = 1:1:$Length(ColumnName) {
		Set Char = $Extract(ColumnName, i)
		If " _.(/" [ Char, $Extract(ColumnName, i+1) ? 1A {
			Set Name = Name_$ZConvert($Extract(ColumnName, i+1), "U")
			Set i = i+1
			Continue
		}
		
		If $ZName(Name_Char, 6) Set Name = Name_Char
	}
	
	Quit Name
]]></Implementation>
</Method>

<Method name="GetExistingProperties">
<Description>
Returns property definitions already present in the class, indexed
on column name</Description>
<FormalSpec>ClassDef:%Dictionary.ClassDefinition,*Existing</FormalSpec>
<Implementation><![CDATA[
	Set ParmName = $Select(..CsvNameParameter '= "": ..CsvNameParameter, 1: ..CsvIndexParameter)
	Set key = ""
	For  {
		#dim PropDef As %Dictionary.PropertyDefinition
		Set PropDef = ClassDef.Properties.GetNext(.key)
		If key = "" Quit
		
		Set Column = PropDef.Parameters.GetAt(ParmName)
		If Column = "" Continue
		
		Set Existing(Column) = PropDef
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
Initializer</Description>
<FormalSpec>ClassName:%String,Separator:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $Data(ClassName) Set ..ClassName = ClassName
	If $Data(Separator) Set ..Separator = Separator
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
