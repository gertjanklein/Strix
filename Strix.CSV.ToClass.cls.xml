<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.CSV.ToClass">
<IncludeCode>Strix</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>65025,42303.833561</TimeCreated>

<Property name="Data">
<Description>
Data to deduce class from. Must include header row.</Description>
<Type>%Stream.Object</Type>
</Property>

<Property name="Separator">
<Description>
The separator to use in parsing the CSV data</Description>
<Type>%String</Type>
<InitialExpression>","</InitialExpression>
</Property>

<Property name="ClassName">
<Description>
Name of class to create</Description>
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="CreateFromFile">
<Description>
Create a class ClassName that can be used to hold a record
in the CSV in file FileName.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>FileName:%String,ClassName:%String,Separator:%String,*Status:%Status</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Me = ..%New(.ClassName, .Separator)
	Set Me.Data = ##class(%FileCharacterStream).%New()
	Set Status = Me.Data.LinkToFile(FileName)
	If 'Status Set Status = $$$BuildStatus("Error linking to file '{}':", Status, FileName) Quit ""
	Set Status = Me.Create()
	If 'Status Quit ""
	Quit Me
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="Create">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim Parser As Strix.CSV.Parser
	Set Parser = ##class(Strix.CSV.Parser).GetParser(..Data, ..Separator)
	If 'Parser.Next(.Status) Quit $$$BuildStatus("Can't read first row from input:", Status)
	If Parser.Data < 2 Quit $$$BuildStatus("Only one column found; is separator correct?")
	
	#dim ClassDef As %Dictionary.ClassDefinition
	Set ClassDef = ##class(Strix.Generator.Utilities).GetClassDef(..ClassName, .IsNew, .Status)
	If 'Status Quit $$$BuildStatus("Can't create/open class definition for '{}':", Status, ..ClassName)
	If IsNew Set ClassDef.Super = "%RegisteredObject,Strix.CSV.Adaptor"
	
	Set Status = ClassDef.Properties.Clear()
	If 'Status Quit $$$BuildStatus("Can't clear existing properties in '{}':", Status, ..ClassName)
	
	For i = 1:1:Parser.Data {
		Set ColumnName = Parser.Data(i)
		If ColumnName = "" Continue
		
		Set PropertyName = ..GetPropertyName(ColumnName)
		If '$ZName(PropertyName, 6) Return $$$BuildStatus("Can't determine valid property name for column '{}' (tried '{}').",, ColumnName, PropertyName)
		
		;Check for multiple column headers with the same name
		If $Increment(PropertyNames(PropertyName)) > 1 {
			Return $$$BuildStatus("Property {} (column {}) occurs more than once.", , PropertyName, ColumnName)
		}
		
		#dim PropDef As %Dictionary.PropertyDefinition
		Set PropDef = ##class(Strix.Generator.Utilities).GetInCollection(ClassDef.Properties, PropertyName, 1, .Status)
		If 'Status Return $$$BuildStatus("Can't create/open property definition for column '{}', property '{}':", Status, ColumnName, PropertyName)
		
		Do PropDef.Parameters.SetAt(ColumnName, "CsvColumnHeader")
		Do PropDef.Parameters.SetAt(i, "CsvColumn")
		Set PropDef.SequenceNumber = i
		Set PropDef.Type = "%String"
	}
	
	Set Status = ClassDef.%Save()
	If 'Status Quit $$$BuildStatus("Error saving class definition:", Status)
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetPropertyName">
<Description>
Derive a valid Cach√© property name from a column header.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ColumnName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $ZName(ColumnName, 6) Quit ColumnName
	
	Set Name = ""
	For i = 1:1:$Length(ColumnName) {
		Set Char = $Extract(ColumnName, i)
		If " _.(" [ Char, $Extract(ColumnName, i+1) ? 1A {
			Set Name = Name_$ZConvert($Extract(ColumnName, i+1), "U")
			Set i = i+1
			Continue
		}
		
		If $ZName(Char, 6) Set Name = Name_Char
	}
	
	Quit Name
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
Initializer</Description>
<FormalSpec>ClassName:%String,Separator:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $Data(ClassName) Set ..ClassName = ClassName
	If $Data(Separator) Set ..Separator = Separator
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
