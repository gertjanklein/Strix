<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.XML.SchemaReader">
<Description>
Schema reader that adds a callback after parsing is done,
but before the classes are created.</Description>
<IncludeCode>Strix</IncludeCode>
<IncludeGenerator>Strix</IncludeGenerator>
<Super>%XML.Utils.SchemaReader</Super>
<TimeCreated>65045,39000.901232</TimeCreated>

<Property name="Callback">
<Description>
Object to receive a callback when the schema is processed, but
before the classes are created. Allows altering</Description>
<Type>Strix.XML.SchemaReaderCallback</Type>
</Property>

<Method name="CallbackSet">
<Description>
Setter that provides a back reference to the schema reader
(this object) to the callback object.</Description>
<FormalSpec>Callback:Strix.XML.SchemaReaderCallback</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set i%Callback = Callback
	If $IsObject(Callback) Set Callback.Reader = $this
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="ProcessStream">
<Description>
Processes XSD present in a stream, by creating a temporary file for it.</Description>
<FormalSpec><![CDATA[Stream:%Stream.Object,Package:%String,&Features:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set FileName = ##class(%File).TempFilename("xsd")
	Set File = ##class(%FileCharacterStream).%New()
	Set File.TranslateTable = "UTF8"
	Set sc = File.LinkToFile(FileName)
	If 'sc Quit $$$BuildStatus("Error linking to temporary file {}:", sc, FileName)
	Set sc = File.CopyFromAndSave(Stream)
	If 'sc Quit $$$BuildStatus("Error copying data to temporary file {}:", sc, FileName)
	Set sc = ..Process(FileName, .Package, .Features)
	Do ##class(%File).Delete(FileName)
	Quit sc
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// =====

]]></Content>
</UDLText>

<Method name="ParseSchema">
<Internal>1</Internal>
<FormalSpec>filename:%String,url:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = ##super(.filename, .url)
	If 'sc Quit sc
	
	Set sc = ..OnAfterParse()
	If 'sc Quit sc
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterParse">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '$IsObject(..Callback) Quit $$$OK
	
	Set sc=..Callback.PostProcessParseTree($Name($$$ClassTreeRoot))
	If 'sc Quit sc
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
