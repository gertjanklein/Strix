<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Strix.XML.WSDLReader">
<Description>
WSDL reader that adds a callback after parsing is done,
but before the classes are created.</Description>
<IncludeCode>Strix</IncludeCode>
<IncludeGenerator>Strix</IncludeGenerator>
<Super>%SOAP.WSDL.Reader</Super>
<TimeCreated>65045,39000.901232</TimeCreated>

<Property name="Callback">
<Description>
Object to receive a callback when the schema is processed, but
before the classes are created. Allows altering</Description>
<Type>Strix.XML.SchemaReaderCallback</Type>
</Property>

<Method name="Process">
<Description>
Overridden method that adds a call to the callback object,
if present.</Description>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>pLocationURL:%String,pPackage:%String="",pTest:%Boolean=0,schemaReader:%XML.Utils.SchemaReader=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	; Open parent method
	Set Parent = ##class(%Dictionary.MethodDefinition).%OpenId("%SOAP.WSDL.Reader||Process", , .sc)
	If 'sc Quit $$$BuildStatus("Error opening parent method.", sc)
	
	; Copy code
	While 'Parent.Implementation.AtEnd {
		Set Line = Parent.Implementation.ReadLine()
		If Line [ "SchemaResult).CreateResult(..SchemaReader" {
			; Insert callback
			Do %code.WriteLine(" If $IsObject(..Callback) Set sc=..Callback.PostProcessParseTree(..SchemaReader,$Name(^CacheTemp(..SchemaReader.Tree,2))) If 'sc Quit")
		}
		Do %code.WriteLine(Line)
	}
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
